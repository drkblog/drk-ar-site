/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var sidila;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/peg.js":
/*!**********************!*\
  !*** ./build/peg.js ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * This file was generated from src\\grammar\\sidila.peg\n * See https://canopy.jcoglan.com/ for documentation\n */\n\n(function () {\n  'use strict';\n\n  function TreeNode (text, offset, elements) {\n    this.text = text;\n    this.offset = offset;\n    this.elements = elements;\n  }\n\n  TreeNode.prototype.forEach = function (block, context) {\n    for (var el = this.elements, i = 0, n = el.length; i < n; i++) {\n      block.call(context, el[i], i, el);\n    }\n  };\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    TreeNode.prototype[Symbol.iterator] = function () {\n      return this.elements[Symbol.iterator]();\n    };\n  }\n\n  var TreeNode1 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['condition'] = elements[1];\n    this['body'] = elements[2];\n  };\n  inherit(TreeNode1, TreeNode);\n\n  var TreeNode2 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['sprite'] = elements[1];\n  };\n  inherit(TreeNode2, TreeNode);\n\n  var TreeNode3 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['direction'] = elements[1];\n  };\n  inherit(TreeNode3, TreeNode);\n\n  var FAILURE = {};\n\n  var Grammar = {\n    _read_body () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._body = this._cache._body || {};\n      var cached = this._cache._body[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = new Array(1);\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          var index3 = this._offset;\n          address3 = this._read_turn();\n          if (address3 === FAILURE) {\n            this._offset = index3;\n            address3 = this._read_move();\n            if (address3 === FAILURE) {\n              this._offset = index3;\n              address3 = this._read_back();\n              if (address3 === FAILURE) {\n                this._offset = index3;\n                address3 = this._read_shoot();\n                if (address3 === FAILURE) {\n                  this._offset = index3;\n                  address3 = this._read_loop();\n                  if (address3 === FAILURE) {\n                    this._offset = index3;\n                  }\n                }\n              }\n            }\n          }\n          if (address3 !== FAILURE) {\n            elements1[0] = address3;\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              address5 = this._read_nl();\n              if (address5 !== FAILURE) {\n              } else {\n                elements1 = null;\n                this._offset = index2;\n              }\n            } else {\n              elements1 = null;\n              this._offset = index2;\n            }\n          } else {\n            elements1 = null;\n            this._offset = index2;\n          }\n        } else {\n          elements1 = null;\n          this._offset = index2;\n        }\n        if (elements1 === null) {\n          address1 = FAILURE;\n        } else {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._body[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_loop () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._loop = this._cache._loop || {};\n      var cached = this._cache._loop[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(3);\n      var address1 = FAILURE;\n      var chunk0 = null, max0 = this._offset + 8;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'mientras') {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 8), this._offset, []);\n        this._offset = this._offset + 8;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::loop', '\\'mientras\\'']);\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          address3 = this._read_condition();\n          if (address3 !== FAILURE) {\n            elements0[1] = address3;\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              var chunk1 = null, max1 = this._offset + 1;\n              if (max1 <= this._inputSize) {\n                chunk1 = this._input.substring(this._offset, max1);\n              }\n              if (chunk1 === '(') {\n                address5 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n                this._offset = this._offset + 1;\n              } else {\n                address5 = FAILURE;\n                if (this._offset > this._failure) {\n                  this._failure = this._offset;\n                  this._expected = [];\n                }\n                if (this._offset === this._failure) {\n                  this._expected.push(['SiDiLa::loop', '\\'(\\'']);\n                }\n              }\n              if (address5 !== FAILURE) {\n                var address6 = FAILURE;\n                address6 = this._read_nl();\n                if (address6 !== FAILURE) {\n                  var address7 = FAILURE;\n                  address7 = this._read_body();\n                  if (address7 !== FAILURE) {\n                    elements0[2] = address7;\n                    var address8 = FAILURE;\n                    address8 = this._read_nl();\n                    if (address8 !== FAILURE) {\n                      var address9 = FAILURE;\n                      var chunk2 = null, max2 = this._offset + 1;\n                      if (max2 <= this._inputSize) {\n                        chunk2 = this._input.substring(this._offset, max2);\n                      }\n                      if (chunk2 === ')') {\n                        address9 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n                        this._offset = this._offset + 1;\n                      } else {\n                        address9 = FAILURE;\n                        if (this._offset > this._failure) {\n                          this._failure = this._offset;\n                          this._expected = [];\n                        }\n                        if (this._offset === this._failure) {\n                          this._expected.push(['SiDiLa::loop', '\\')\\'']);\n                        }\n                      }\n                      if (address9 !== FAILURE) {\n                      } else {\n                        elements0 = null;\n                        this._offset = index1;\n                      }\n                    } else {\n                      elements0 = null;\n                      this._offset = index1;\n                    }\n                  } else {\n                    elements0 = null;\n                    this._offset = index1;\n                  }\n                } else {\n                  elements0 = null;\n                  this._offset = index1;\n                }\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.makeLoop(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._loop[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_condition () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._condition = this._cache._condition || {};\n      var cached = this._cache._condition[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(3);\n      var address1 = FAILURE;\n      var chunk0 = null, max0 = this._offset + 6;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'no hay') {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 6), this._offset, []);\n        this._offset = this._offset + 6;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::condition', '\\'no hay\\'']);\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          address3 = this._read_sprite();\n          if (address3 !== FAILURE) {\n            elements0[1] = address3;\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              var chunk1 = null, max1 = this._offset + 8;\n              if (max1 <= this._inputSize) {\n                chunk1 = this._input.substring(this._offset, max1);\n              }\n              if (chunk1 === 'adelante') {\n                address5 = new TreeNode(this._input.substring(this._offset, this._offset + 8), this._offset, []);\n                this._offset = this._offset + 8;\n              } else {\n                address5 = FAILURE;\n                if (this._offset > this._failure) {\n                  this._failure = this._offset;\n                  this._expected = [];\n                }\n                if (this._offset === this._failure) {\n                  this._expected.push(['SiDiLa::condition', '\\'adelante\\'']);\n                }\n              }\n              if (address5 !== FAILURE) {\n                elements0[2] = address5;\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.makeCondition(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._condition[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_sprite () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._sprite = this._cache._sprite || {};\n      var cached = this._cache._sprite[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset;\n      var chunk0 = null, max0 = this._offset + 5;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'pared') {\n        address0 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset, []);\n        this._offset = this._offset + 5;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::sprite', '\\'pared\\'']);\n        }\n      }\n      if (address0 === FAILURE) {\n        this._offset = index1;\n        var chunk1 = null, max1 = this._offset + 4;\n        if (max1 <= this._inputSize) {\n          chunk1 = this._input.substring(this._offset, max1);\n        }\n        if (chunk1 === 'algo') {\n          address0 = new TreeNode(this._input.substring(this._offset, this._offset + 4), this._offset, []);\n          this._offset = this._offset + 4;\n        } else {\n          address0 = FAILURE;\n          if (this._offset > this._failure) {\n            this._failure = this._offset;\n            this._expected = [];\n          }\n          if (this._offset === this._failure) {\n            this._expected.push(['SiDiLa::sprite', '\\'algo\\'']);\n          }\n        }\n        if (address0 === FAILURE) {\n          this._offset = index1;\n        }\n      }\n      this._cache._sprite[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_move () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._move = this._cache._move || {};\n      var cached = this._cache._move[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var chunk0 = null, max0 = this._offset + 7;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'avanzar') {\n        address0 = this._actions.makeMove(this._input, this._offset, this._offset + 7, []);\n        this._offset = this._offset + 7;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::move', '\\'avanzar\\'']);\n        }\n      }\n      this._cache._move[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_back () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._back = this._cache._back || {};\n      var cached = this._cache._back[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var chunk0 = null, max0 = this._offset + 10;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'retroceder') {\n        address0 = this._actions.makeBack(this._input, this._offset, this._offset + 10, []);\n        this._offset = this._offset + 10;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::back', '\\'retroceder\\'']);\n        }\n      }\n      this._cache._back[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_shoot () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._shoot = this._cache._shoot || {};\n      var cached = this._cache._shoot[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var chunk0 = null, max0 = this._offset + 8;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'disparar') {\n        address0 = this._actions.makeShoot(this._input, this._offset, this._offset + 8, []);\n        this._offset = this._offset + 8;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::shoot', '\\'disparar\\'']);\n        }\n      }\n      this._cache._shoot[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_turn () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._turn = this._cache._turn || {};\n      var cached = this._cache._turn[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(2);\n      var address1 = FAILURE;\n      var chunk0 = null, max0 = this._offset + 5;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'girar') {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset, []);\n        this._offset = this._offset + 5;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::turn', '\\'girar\\'']);\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          var chunk1 = null, max1 = this._offset + 8;\n          if (max1 <= this._inputSize) {\n            chunk1 = this._input.substring(this._offset, max1);\n          }\n          if (chunk1 === 'hacia la') {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 8), this._offset, []);\n            this._offset = this._offset + 8;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::turn', '\\'hacia la\\'']);\n            }\n          }\n          if (address3 !== FAILURE) {\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              address5 = this._read_direction();\n              if (address5 !== FAILURE) {\n                elements0[1] = address5;\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.makeTurn(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._turn[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_direction () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._direction = this._cache._direction || {};\n      var cached = this._cache._direction[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset;\n      var chunk0 = null, max0 = this._offset + 9;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'izquierda') {\n        address0 = new TreeNode(this._input.substring(this._offset, this._offset + 9), this._offset, []);\n        this._offset = this._offset + 9;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::direction', '\"izquierda\"']);\n        }\n      }\n      if (address0 === FAILURE) {\n        this._offset = index1;\n        var chunk1 = null, max1 = this._offset + 7;\n        if (max1 <= this._inputSize) {\n          chunk1 = this._input.substring(this._offset, max1);\n        }\n        if (chunk1 === 'derecha') {\n          address0 = new TreeNode(this._input.substring(this._offset, this._offset + 7), this._offset, []);\n          this._offset = this._offset + 7;\n        } else {\n          address0 = FAILURE;\n          if (this._offset > this._failure) {\n            this._failure = this._offset;\n            this._expected = [];\n          }\n          if (this._offset === this._failure) {\n            this._expected.push(['SiDiLa::direction', '\"derecha\"']);\n          }\n        }\n        if (address0 === FAILURE) {\n          this._offset = index1;\n        }\n      }\n      this._cache._direction[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_ws () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._ws = this._cache._ws || {};\n      var cached = this._cache._ws[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = [], address2 = null;\n        while (true) {\n          var chunk0 = null, max0 = this._offset + 1;\n          if (max0 <= this._inputSize) {\n            chunk0 = this._input.substring(this._offset, max0);\n          }\n          if (chunk0 !== null && /^[ \\t]/.test(chunk0)) {\n            address2 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n            this._offset = this._offset + 1;\n          } else {\n            address2 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::ws', '[ \\\\t]']);\n            }\n          }\n          if (address2 !== FAILURE) {\n            elements1.push(address2);\n          } else {\n            break;\n          }\n        }\n        if (elements1.length >= 1) {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        } else {\n          address1 = FAILURE;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._ws[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_nl () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._nl = this._cache._nl || {};\n      var cached = this._cache._nl[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = [], address2 = null;\n        while (true) {\n          var chunk0 = null, max0 = this._offset + 1;\n          if (max0 <= this._inputSize) {\n            chunk0 = this._input.substring(this._offset, max0);\n          }\n          if (chunk0 !== null && /^[\\r\\n]/.test(chunk0)) {\n            address2 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n            this._offset = this._offset + 1;\n          } else {\n            address2 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::nl', '[\\\\r\\\\n]']);\n            }\n          }\n          if (address2 !== FAILURE) {\n            elements1.push(address2);\n          } else {\n            break;\n          }\n        }\n        if (elements1.length >= 1) {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        } else {\n          address1 = FAILURE;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._nl[index0] = [address0, this._offset];\n      return address0;\n    }\n  };\n\n  var Parser = function(input, actions, types) {\n    this._input = input;\n    this._inputSize = input.length;\n    this._actions = actions;\n    this._types = types;\n    this._offset = 0;\n    this._cache = {};\n    this._failure = 0;\n    this._expected = [];\n  };\n\n  Parser.prototype.parse = function() {\n    var tree = this._read_body();\n    if (tree !== FAILURE && this._offset === this._inputSize) {\n      return tree;\n    }\n    if (this._expected.length === 0) {\n      this._failure = this._offset;\n      this._expected.push(['SiDiLa', '<EOF>']);\n    }\n    this.constructor.lastError = { offset: this._offset, expected: this._expected };\n    throw new SyntaxError(formatError(this._input, this._failure, this._expected));\n  };\n\n  Object.assign(Parser.prototype, Grammar);\n\n\n  function parse(input, options) {\n    options = options || {};\n    var parser = new Parser(input, options.actions, options.types);\n    return parser.parse();\n  }\n\n  function formatError(input, offset, expected) {\n    var lines = input.split(/\\n/g),\n        lineNo = 0,\n        position = 0;\n\n    while (position <= offset) {\n      position += lines[lineNo].length + 1;\n      lineNo += 1;\n    }\n\n    var line = lines[lineNo - 1],\n        message = 'Line ' + lineNo + ': expected one of:\\n\\n';\n\n    for (var i = 0; i < expected.length; i++) {\n      message += '    - ' + expected[i][1] + ' from ' + expected[i][0] + '\\n';\n    }\n    var number = lineNo.toString();\n    while (number.length < 6) number = ' ' + number;\n    message += '\\n' + number + ' | ' + line + '\\n';\n\n    position -= line.length + 10;\n\n    while (position < offset) {\n      message += ' ';\n      position += 1;\n    }\n    return message + '^';\n  }\n\n  function inherit(subclass, parent) {\n    function chain () {};\n    chain.prototype = parent.prototype;\n    subclass.prototype = new chain();\n    subclass.prototype.constructor = subclass;\n  }\n\n\n  var exported = { Grammar: Grammar, Parser: Parser, parse: parse };\n\n  if (true) {\n    Object.assign(exports, exported);\n  } else { var ns; }\n})();\n\n\n//# sourceURL=webpack://sidila/./build/peg.js?");

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasPainter\": () => (/* reexport safe */ _drawing__WEBPACK_IMPORTED_MODULE_2__.CanvasPainter),\n/* harmony export */   \"EditorBoard\": () => (/* reexport safe */ _editor_board__WEBPACK_IMPORTED_MODULE_1__.EditorBoard),\n/* harmony export */   \"GameBoard\": () => (/* reexport safe */ _game_board__WEBPACK_IMPORTED_MODULE_0__.GameBoard),\n/* harmony export */   \"PalettePainter\": () => (/* reexport safe */ _drawing__WEBPACK_IMPORTED_MODULE_2__.PalettePainter),\n/* harmony export */   \"Score\": () => (/* reexport safe */ _score__WEBPACK_IMPORTED_MODULE_6__.Score),\n/* harmony export */   \"StepInterpreter\": () => (/* reexport safe */ _interpreter__WEBPACK_IMPORTED_MODULE_3__.StepInterpreter),\n/* harmony export */   \"Storage\": () => (/* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_5__.Storage),\n/* harmony export */   \"maps\": () => (/* binding */ maps),\n/* harmony export */   \"parse\": () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _game_board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game-board */ \"./src/game-board.js\");\n/* harmony import */ var _editor_board__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editor-board */ \"./src/editor-board.js\");\n/* harmony import */ var _drawing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drawing */ \"./src/drawing.js\");\n/* harmony import */ var _interpreter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interpreter */ \"./src/interpreter.js\");\n/* harmony import */ var _instruction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./instruction */ \"./src/instruction.js\");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage */ \"./src/storage.js\");\n/* harmony import */ var _score__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./score */ \"./src/score.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst maps = __webpack_require__(/*! ../build/peg */ \"./build/peg.js\");\r\n\r\nclass Actions {\r\n  makeMove(input, start, end, elements) {\r\n    return new _instruction__WEBPACK_IMPORTED_MODULE_4__.Move(start, end);\r\n  }\r\n  makeBack(input, start, end, elements) {\r\n    return new _instruction__WEBPACK_IMPORTED_MODULE_4__.Back(start, end);\r\n  }\r\n  makeShoot(input, start, end, elements) {\r\n    return new _instruction__WEBPACK_IMPORTED_MODULE_4__.Shoot(start, end);\r\n  }\r\n  makeTurn(input, start, end, elements) {\r\n    return new _instruction__WEBPACK_IMPORTED_MODULE_4__.Turn(start, end, elements[1].text);\r\n  }\r\n  makeLoop(input, start, end, elements) {\r\n    return new _instruction__WEBPACK_IMPORTED_MODULE_4__.Loop(start, end, elements[1], elements[2].elements);\r\n  }\r\n  makeCondition(input, start, end, elements) {\r\n    return new _instruction__WEBPACK_IMPORTED_MODULE_4__.Condition(start, end, elements[1].text);\r\n  }\r\n}\r\n\r\nfunction parse(code) {\r\n  return maps.parse(code, { actions: new Actions() })\r\n}\n\n//# sourceURL=webpack://sidila/./src/app.js?");

/***/ }),

/***/ "./src/board.js":
/*!**********************!*\
  !*** ./src/board.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Board\": () => (/* binding */ Board),\n/* harmony export */   \"CardinalDirection\": () => (/* binding */ CardinalDirection),\n/* harmony export */   \"LogicBlock\": () => (/* binding */ LogicBlock),\n/* harmony export */   \"MoveDirection\": () => (/* binding */ MoveDirection),\n/* harmony export */   \"Player\": () => (/* binding */ Player),\n/* harmony export */   \"Zombie\": () => (/* binding */ Zombie)\n/* harmony export */ });\n// Enums\r\nclass LogicBlock {\r\n  static Wall = new LogicBlock(\"█\");\r\n  static Exit = new LogicBlock(\"░\");\r\n  static Space = new LogicBlock(\" \");\r\n  static Zombie = new LogicBlock(\"👾\");\r\n  static Sphinx = new LogicBlock(\"💀\");\r\n\r\n  constructor(symbol) {\r\n    this.symbol = symbol;\r\n  }\r\n}\r\n\r\nclass CardinalDirection {\r\n  static North = new CardinalDirection(\r\n    \"▲\", \r\n    position => ({x: position.x, y: position.y - 1}),\r\n    position => ({x: position.x, y: position.y + 1})\r\n  );\r\n  static East = new CardinalDirection(\r\n    \"▶\", \r\n    position => ({x: position.x + 1, y: position.y}),\r\n    position => ({x: position.x - 1, y: position.y})\r\n  );\r\n  static South = new CardinalDirection(\r\n    \"▼\", \r\n    position => ({x: position.x, y: position.y + 1}),\r\n    position => ({x: position.x, y: position.y - 1})\r\n  );\r\n  static West = new CardinalDirection(\r\n    \"◀\", \r\n    position => ({x: position.x - 1, y: position.y}),\r\n    position => ({x: position.x + 1, y: position.y})\r\n  );\r\n\r\n  constructor(symbol, advancePosition, retreatPosition) {\r\n    this.symbol = symbol;\r\n    this.advancePosition = advancePosition;\r\n    this.retreatPosition = retreatPosition;\r\n  }\r\n\r\n  advance(position) {\r\n    return this.advancePosition(position);\r\n  }\r\n\r\n  retreat(position) {\r\n    return this.retreatPosition(position);\r\n  }\r\n\r\n  static order = [this.North, this.East, this.South, this.West];\r\n  static toTheRight(direction) {\r\n    const index = this.order.indexOf(direction) + 1;\r\n    return this.order[index % 4];\r\n  }\r\n\r\n  static toTheLeft(direction) {\r\n    const index = this.order.indexOf(direction) - 1;\r\n    return this.order[((index > -1) ? index : 3)];\r\n  }\r\n}\r\n\r\nclass MoveDirection {\r\n  static Forth = new MoveDirection((cardinalDirection, player) => cardinalDirection.advance(player));\r\n  static Back = new MoveDirection((cardinalDirection, player) => cardinalDirection.retreat(player));\r\n\r\n  constructor(apply) {\r\n    this.apply = apply;\r\n  }\r\n}\r\n\r\nclass Movable {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.crashed = false;\r\n  }\r\n  \r\n  isAt(x, y) {\r\n    return this.x == x && this.y == y;\r\n  }\r\n  \r\n  crash() {\r\n    this.crashed = true;\r\n  }\r\n}\r\n\r\n// TODO: Maybe extract position class\r\nclass Zombie extends Movable {\r\n  constructor(x, y) {\r\n    super(x, y);\r\n    this.sprite = null;\r\n    this.dead = null;\r\n  }\r\n\r\n  setupSprites(theme) {\r\n    this.sprite = theme.sprite['zombie'];\r\n    this.dead = theme.sprite['deadZombie'];\r\n  }\r\n\r\n  getSprite() {\r\n    return (this.crashed) ? this.dead : this.sprite;\r\n  }\r\n}\r\n\r\nclass Player extends Movable {\r\n  constructor(x, y, direction) {\r\n    super(x, y);\r\n    this.direction = direction;\r\n    this.done = false;\r\n  }\r\n\r\n  setupSprites(theme) {\r\n    CardinalDirection.North.sprite = theme.sprite['north'];\r\n    CardinalDirection.East.sprite = theme.sprite['east'];\r\n    CardinalDirection.South.sprite = theme.sprite['south'];\r\n    CardinalDirection.West.sprite = theme.sprite['west'];\r\n    CardinalDirection.North.arrowSprite = theme.sprite['nextNorth'];\r\n    CardinalDirection.East.arrowSprite = theme.sprite['nextEast'];\r\n    CardinalDirection.South.arrowSprite = theme.sprite['nextSouth'];\r\n    CardinalDirection.West.arrowSprite = theme.sprite['nextWest'];\r\n    this.deadSprite = theme.sprite['dead'];\r\n  }\r\n\r\n  getSprite() {\r\n    if (this.crashed) {\r\n      return this.deadSprite;\r\n    }\r\n    return this.direction.sprite;\r\n  }\r\n  \r\n  getNextMoveSprite() {\r\n    if (this.crashed || this.done) {\r\n      return null;\r\n    }\r\n    return this.direction.arrowSprite;\r\n  }\r\n\r\n  move(moveDirection) {\r\n    const newPosition = moveDirection.apply(this.direction, this);\r\n    this.x = newPosition.x;\r\n    this.y = newPosition.y;\r\n  }\r\n\r\n  getShootTarget() {\r\n    return this.direction.advance(this);\r\n  }\r\n\r\n  finish() {\r\n    this.done = true;\r\n  }\r\n\r\n  wouldMove(moveDirection) {\r\n    return moveDirection.apply(this.direction, this);\r\n  }\r\n\r\n  wouldMoveTo(moveDirection, x, y) {\r\n    const newPosition = this.wouldMove(moveDirection);\r\n    return newPosition.x === x && newPosition.y === y;\r\n  }\r\n\r\n  rotateLeft() {\r\n    this.direction = CardinalDirection.toTheLeft(this.direction);\r\n  }\r\n  rotateRight() {\r\n    this.direction = CardinalDirection.toTheRight(this.direction);\r\n  }\r\n}\r\n\r\nclass Board {\r\n\r\n  loadScene(scene) {\r\n    this.scene = scene;\r\n  }\r\n\r\n  getSprite(x, y) {\r\n    // Invert axis to match canvas to JSON matrix\r\n    return this.scene.map[y][x];\r\n  }\r\n\r\n  getLogicLabelForSprite(sprite) {\r\n    return this.scene.logic[sprite];\r\n  }\r\n\r\n  getLogic(x, y) {\r\n    const text = this.getLogicLabelForSprite(this.getSprite(x, y));\r\n    if (text === undefined) {\r\n      return LogicBlock.Wall;\r\n    }\r\n    return LogicBlock[text];\r\n  }\r\n\r\n  getSlotIndexFor(x, y) {\r\n    return x + y * this.scene.width;\r\n  }\r\n\r\n  getCoordinatesFor(index) {\r\n    return {\r\n      x: index % this.scene.width,\r\n      y: Math.floor(index / this.scene.width)\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://sidila/./src/board.js?");

/***/ }),

/***/ "./src/drawing.js":
/*!************************!*\
  !*** ./src/drawing.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasPainter\": () => (/* binding */ CanvasPainter),\n/* harmony export */   \"PalettePainter\": () => (/* binding */ PalettePainter)\n/* harmony export */ });\nconst imageBaseUrl = '/sidila/img/';\r\n\r\nclass GridPainter {\r\n  constructor(canvas, width, height, slotWidth, slotHeight, hoverColor) {\r\n    this.canvas = canvas;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.slotWidth = slotWidth;\r\n    this.slotHeight = slotHeight;\r\n    this.slotsInX = Math.floor(this.width / this.slotWidth);\r\n    this.slotsInY = Math.floor(this.height / this.slotHeight);\r\n    this.hoverColor = hoverColor;\r\n    this.scaleX = canvas.clientWidth / this.width;\r\n    this.scaleY = canvas.clientHeight / this.height;\r\n  }\r\n\r\n  mouseOver(x, y) {\r\n    this.hover = this.getSlotIndexForDiscrete(\r\n      Math.floor(x / this.scaleX / this.slotWidth),\r\n      Math.floor(y / this.scaleY / this.slotHeight)\r\n    );\r\n    return this.hover;\r\n  }\r\n\r\n  getSlotIndexForDiscrete(x, y) {\r\n    return x + y * this.slotsInX;\r\n  }\r\n\r\n  getCanvasCoordinatesForSlot(index) {\r\n    return {\r\n      x: (index % this.slotsInX) * this.slotWidth,\r\n      y: Math.floor(index / this.slotsInX) * this.slotHeight\r\n    };\r\n  }\r\n\r\n  drawGridSlot(context, origin, color) {\r\n    context.strokeStyle = color;\r\n    context.strokeRect(origin.x + .5, origin.y + .5, this.slotWidth - 1, this.slotHeight - 1);\r\n  }\r\n\r\n  paintHover(context) {\r\n    if (this.hover !== undefined) {\r\n      const origin = this.getCanvasCoordinatesForSlot(this.hover);\r\n      this.drawGridSlot(context, origin, this.hoverColor);\r\n    }\r\n  }\r\n}\r\n\r\nclass CanvasPainter extends GridPainter {\r\n  constructor(canvas, scene) {\r\n    super(\r\n      canvas, \r\n      scene.width * scene.theme.spriteWidth,\r\n      scene.height * scene.theme.spriteHeight,\r\n      scene.theme.spriteWidth, \r\n      scene.theme.spriteHeight,\r\n      'red'\r\n    );\r\n    this.scene = scene;\r\n    this.sprites = new Image();\r\n    this.sprites.src = `${imageBaseUrl}${this.scene.theme.image}`;\r\n  }\r\n\r\n  paint(board) {\r\n    const context = this.canvas.getContext('2d');\r\n    context.fillStyle = this.scene.theme.background;\r\n    context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    for(let y=0; y < this.slotsInY; y++) {\r\n      for(let x=0; x < this.slotsInX; x++) {\r\n        const spriteNumber = board.getSprite(x, y);\r\n        this.drawSprite(context, spriteNumber, x, y);\r\n        const overlaySpriteNumber = board.getOverlaySprite(x, y);\r\n        if (overlaySpriteNumber != null) {\r\n          this.drawSprite(context, overlaySpriteNumber, x, y);\r\n        }\r\n      }\r\n    }\r\n    this.paintHover(context);\r\n  }\r\n\r\n  drawSprite(context, spriteNumber, x, y) {\r\n    const sourceX = this.getSourceX(spriteNumber);\r\n    const sourceY = this.getSourceY(spriteNumber);\r\n    context.drawImage(\r\n      this.sprites, \r\n      sourceX, \r\n      sourceY,\r\n      this.slotWidth,\r\n      this.slotHeight,\r\n      x * this.slotWidth,\r\n      y * this.slotHeight,\r\n      this.slotWidth,\r\n      this.slotHeight\r\n    );    \r\n  }\r\n\r\n  getSourceX(spriteNumber) {\r\n    return this.slotWidth * (spriteNumber % (this.sprites.width/this.slotWidth));\r\n  }\r\n\r\n  getSourceY(spriteNumber) {\r\n    return this.slotHeight * Math.floor(spriteNumber / (this.sprites.width/this.slotWidth));\r\n  }\r\n}\r\n\r\nclass PalettePainter extends GridPainter {\r\n  constructor(canvas, scene) {\r\n    super(\r\n      canvas, \r\n      scene.theme.imageWidth,\r\n      scene.theme.imageHeight,\r\n      scene.theme.spriteWidth, \r\n      scene.theme.spriteHeight,\r\n      'red'\r\n    );\r\n    this.scene = scene;\r\n    this.sprites = new Image();\r\n    this.sprites.src = `${imageBaseUrl}${scene.theme.image}`;\r\n    this.selected = 0;\r\n  }\r\n\r\n  paint() {\r\n    const context = this.canvas.getContext('2d');\r\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    context.drawImage(this.sprites, 0, 0);\r\n    if (this.selected !== undefined) {\r\n      const origin = this.getCanvasCoordinatesForSlot(this.selected);\r\n      this.drawGridSlot(context, origin, 'white');\r\n    }\r\n    this.paintHover(context);\r\n  }\r\n\r\n  selectSlot(index) {\r\n    this.selected = index;\r\n  }\r\n}\n\n//# sourceURL=webpack://sidila/./src/drawing.js?");

/***/ }),

/***/ "./src/editor-board.js":
/*!*****************************!*\
  !*** ./src/editor-board.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EditorBoard\": () => (/* binding */ EditorBoard)\n/* harmony export */ });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ \"./src/board.js\");\n\r\n\r\nclass EditorBoard extends _board__WEBPACK_IMPORTED_MODULE_0__.Board {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  load(source) {\r\n    const scene = JSON.parse(source);\r\n    this.loadScene(scene);\r\n  }\r\n\r\n  save() {\r\n    return JSON.stringify(this.scene, null, 2);\r\n  }\r\n\r\n  setSlot(index, sprite) {\r\n    const coordinates = this.getCoordinatesFor(index);\r\n    this.scene.map[coordinates.y][coordinates.x] = sprite;\r\n  }\r\n\r\n  getOverlaySprite(x, y) {\r\n    return null;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://sidila/./src/editor-board.js?");

/***/ }),

/***/ "./src/game-board.js":
/*!***************************!*\
  !*** ./src/game-board.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GameBoard\": () => (/* binding */ GameBoard)\n/* harmony export */ });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ \"./src/board.js\");\n/* harmony import */ var _sound__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sound */ \"./src/sound.js\");\n\r\n\r\n\r\nclass GameBoard extends _board__WEBPACK_IMPORTED_MODULE_0__.Board {\r\n  constructor() {\r\n    super();\r\n    this.soundOn = true;\r\n    this.sound = {\r\n      step: new _sound__WEBPACK_IMPORTED_MODULE_1__.Sound('step.ogg'),\r\n      bang: new _sound__WEBPACK_IMPORTED_MODULE_1__.Sound('bang.ogg'),\r\n      win: new _sound__WEBPACK_IMPORTED_MODULE_1__.Sound('win.ogg'),\r\n      gameover: new _sound__WEBPACK_IMPORTED_MODULE_1__.Sound('gameover.ogg')\r\n    };\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    const scene = __webpack_require__(/*! ./scene/dungeon */ \"./src/scene/dungeon.json\");\r\n    this.loadScene(scene);\r\n    this.player = new _board__WEBPACK_IMPORTED_MODULE_0__.Player(\r\n      this.scene.player.x,\r\n      this.scene.player.y,\r\n      _board__WEBPACK_IMPORTED_MODULE_0__.CardinalDirection[this.scene.player.direction]\r\n    );\r\n    this.zombie = new _board__WEBPACK_IMPORTED_MODULE_0__.Zombie(\r\n      this.scene.zombie.x,\r\n      this.scene.zombie.y\r\n    );\r\n    this.player.setupSprites(this.scene.theme);\r\n    this.zombie.setupSprites(this.scene.theme);\r\n    this.moves = 0;\r\n  }\r\n\r\n  canMoveInto(x, y) {\r\n    const logic = this.getLogic(x, y);\r\n    return logic === _board__WEBPACK_IMPORTED_MODULE_0__.LogicBlock.Space || logic === _board__WEBPACK_IMPORTED_MODULE_0__.LogicBlock.Exit;\r\n  }\r\n\r\n  isCrashed() {\r\n    return this.player.crashed;\r\n  }\r\n\r\n  isDone() {\r\n    return this.player.done;\r\n  }\r\n\r\n  movePlayer(moveDirection) {\r\n    this.playSound(this.sound.step);\r\n    const newPosition = this.player.wouldMove(moveDirection);\r\n    if (this.canMoveInto(newPosition.x, newPosition.y)) {\r\n      this.player.move(moveDirection);\r\n      if (this.getLogicAround(this.player.x, this.player.y).includes(_board__WEBPACK_IMPORTED_MODULE_0__.LogicBlock.Sphinx)) {\r\n        this.player.crash();\r\n      }\r\n      if (this.getLogic(this.player.x, this.player.y) === _board__WEBPACK_IMPORTED_MODULE_0__.LogicBlock.Exit) {\r\n        this.playSound(this.sound.win);\r\n        this.player.finish();\r\n      }\r\n    } else {\r\n      this.player.crash();\r\n    }\r\n    if (this.player.crashed) {\r\n      this.playSound(this.sound.gameover);\r\n    }\r\n    this.moves++;\r\n  }\r\n  rotatePlayerLeft() {\r\n    this.player.rotateLeft();\r\n  }\r\n  rotatePlayerRight() {\r\n    this.player.rotateRight();\r\n  }\r\n  playerShoot() {\r\n    this.playSound(this.sound.bang);\r\n    const shootAt = this.player.getShootTarget();\r\n    if (this.getLogic(shootAt.x, shootAt.y) === _board__WEBPACK_IMPORTED_MODULE_0__.LogicBlock.Zombie) {\r\n      this.zombie.crash();\r\n    }\r\n  }\r\n  getLogic(x, y) {\r\n    if (this.zombie?.isAt(x, y)) {\r\n      return _board__WEBPACK_IMPORTED_MODULE_0__.LogicBlock.Zombie;\r\n    }\r\n    return super.getLogic(x, y);\r\n  }\r\n  getLogicAround(x, y) {\r\n    // TODO: handle edge cases\r\n    return [\r\n      this.getLogic(x, y-1),\r\n      this.getLogic(x, y+1),\r\n      this.getLogic(x-1, y),\r\n      this.getLogic(x+1, y),\r\n    ];\r\n  }\r\n  getLogicInFrontOfPlayer() {\r\n    const inFrontPosition = this.player.wouldMove(_board__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.Forth);\r\n    return this.getLogic(inFrontPosition.x, inFrontPosition.y);\r\n  }\r\n\r\n  getSprite(x, y) {\r\n    return super.getSprite(x, y);\r\n  }\r\n\r\n  getOverlaySprite(x, y) {\r\n    if (this.player.isAt(x, y)) {\r\n      return this.player.getSprite();\r\n    }\r\n    if (this.zombie?.isAt(x, y)) {\r\n      return this.zombie.getSprite();\r\n    }\r\n    if (this.player.wouldMoveTo(_board__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.Forth, x, y)) {\r\n      return this.player.getNextMoveSprite();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getMoves() {\r\n    return this.moves;\r\n  }\r\n\r\n  setSound(on) {\r\n    this.soundOn = on;\r\n  }\r\n\r\n  playSound(fx) {\r\n    if (this.soundOn) {\r\n      fx.play();\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://sidila/./src/game-board.js?");

/***/ }),

/***/ "./src/instruction.js":
/*!****************************!*\
  !*** ./src/instruction.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Action\": () => (/* binding */ Action),\n/* harmony export */   \"Back\": () => (/* binding */ Back),\n/* harmony export */   \"Condition\": () => (/* binding */ Condition),\n/* harmony export */   \"Instruction\": () => (/* binding */ Instruction),\n/* harmony export */   \"Loop\": () => (/* binding */ Loop),\n/* harmony export */   \"Move\": () => (/* binding */ Move),\n/* harmony export */   \"Shoot\": () => (/* binding */ Shoot),\n/* harmony export */   \"Turn\": () => (/* binding */ Turn)\n/* harmony export */ });\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./board */ \"./src/board.js\");\n\r\n\r\nclass Instruction {\r\n  constructor(start, end) {\r\n    this.location = { start, end };\r\n  }\r\n}\r\n\r\nclass Action extends Instruction {\r\n  constructor(start, end) {\r\n    super(start, end);\r\n  }\r\n}\r\n\r\nclass Move extends Action {\r\n  constructor(start, end) {\r\n    super(start, end);\r\n  }\r\n\r\n  execute(board) {\r\n    board.movePlayer(_board__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.Forth);\r\n  }\r\n}\r\n\r\nclass Back extends Action {\r\n  constructor(start, end) {\r\n    super(start, end);\r\n  }\r\n\r\n  execute(board) {\r\n    board.movePlayer(_board__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.Back);\r\n  }\r\n}\r\n\r\nclass Shoot extends Action {\r\n  constructor(start, end) {\r\n    super(start, end);\r\n  }\r\n\r\n  execute(board) {\r\n    board.playerShoot();\r\n  }\r\n}\r\n\r\nclass TurnDirection {\r\n  static Left = new TurnDirection((board) => board.rotatePlayerLeft());\r\n  static Right = new TurnDirection((board) => board.rotatePlayerRight());\r\n\r\n  constructor(action) {\r\n    this.action = action;\r\n  }\r\n}\r\n\r\nclass Turn extends Action {\r\n  constructor(start, end, direction) {\r\n    super(start, end);\r\n    this.direction = (direction === 'derecha') ? TurnDirection.Right : TurnDirection.Left;\r\n  }\r\n\r\n  execute(board) {\r\n    this.direction.action(board);\r\n  }\r\n}\r\n\r\nclass Loop extends Instruction {\r\n  constructor(start, end, condition, body) {\r\n    super(start, end);\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  evaluate(board) {\r\n    return this.condition.evaluate(board);\r\n  }\r\n}\r\n\r\nclass Condition extends Instruction {\r\n  constructor(start, end, label) {\r\n    super(start, end);\r\n    if (label === 'pared') {\r\n      this.condition = (sprite) => sprite !== _board__WEBPACK_IMPORTED_MODULE_0__.LogicBlock.Wall;\r\n    } else {\r\n      this.condition = (sprite) => sprite === _board__WEBPACK_IMPORTED_MODULE_0__.LogicBlock.Space;\r\n    }\r\n  }\r\n\r\n  evaluate(board) {\r\n    return this.condition(board.getLogicInFrontOfPlayer());\r\n  }\r\n}\n\n//# sourceURL=webpack://sidila/./src/instruction.js?");

/***/ }),

/***/ "./src/interpreter.js":
/*!****************************!*\
  !*** ./src/interpreter.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StepInterpreter\": () => (/* binding */ StepInterpreter)\n/* harmony export */ });\n/* harmony import */ var _publisher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./publisher */ \"./src/publisher.js\");\n/* harmony import */ var _instruction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instruction */ \"./src/instruction.js\");\n\r\n\r\n\r\nclass StepInterpreter {\r\n  constructor(board, tree) {\r\n    this.publisher = new _publisher__WEBPACK_IMPORTED_MODULE_0__.Publisher();\r\n    this.board = board;\r\n    this.tree = tree;\r\n    this.stack = [];\r\n    this.stackBody(this.tree.elements);\r\n  }\r\n\r\n  stackBody(nodes) {\r\n    for(let i=nodes.length - 1; i >= 0; i--) {\r\n      this.stackNode(nodes[i]);\r\n    }\r\n  }\r\n  stackNode(node) {\r\n    this.stack.push(node);\r\n  }\r\n\r\n  tick() {\r\n    const node = this.stack.pop();\r\n    if (node !== undefined) {\r\n      this.visitNode(node);\r\n    }\r\n  }\r\n\r\n  isFinished() {\r\n    return this.stack.length === 0;\r\n  }\r\n\r\n  visitNode(node) {\r\n    const instruction = node.elements[0];\r\n    const event = this.createStepEvent(instruction);\r\n    this.publisher.publish(event);\r\n    if (instruction instanceof _instruction__WEBPACK_IMPORTED_MODULE_1__.Action) {\r\n      instruction.execute(board);\r\n    } else if (instruction instanceof _instruction__WEBPACK_IMPORTED_MODULE_1__.Loop) {\r\n      if (instruction.evaluate(board)) {\r\n        this.stackNode(node);\r\n        this.stackBody(instruction.body);\r\n      }\r\n    }\r\n  }\r\n\r\n  createStepEvent(node) {\r\n    return {\r\n      location: node.location\r\n    };\r\n  }\r\n\r\n  subscribeToStep(subscriber) {\r\n    this.publisher.addSubscriber(subscriber);\r\n  }\r\n}\n\n//# sourceURL=webpack://sidila/./src/interpreter.js?");

/***/ }),

/***/ "./src/publisher.js":
/*!**************************!*\
  !*** ./src/publisher.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Publisher\": () => (/* binding */ Publisher)\n/* harmony export */ });\nclass Publisher {\r\n  constructor() {\r\n    this.subscribers = [];\r\n  }\r\n\r\n  addSubscriber(subscriber) {\r\n    if (!this.subscribers.includes(subscriber)) {\r\n      this.subscribers.push(subscriber);\r\n    } \r\n  }\r\n\r\n  publish(event) {\r\n    this.subscribers.forEach(subscriber => {\r\n      subscriber(event);\r\n    });\r\n  }\r\n}\n\n//# sourceURL=webpack://sidila/./src/publisher.js?");

/***/ }),

/***/ "./src/score.js":
/*!**********************!*\
  !*** ./src/score.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Score\": () => (/* binding */ Score)\n/* harmony export */ });\nclass Score {\r\n  constructor() {\r\n    this.base = 100000; // 100k\r\n  }\r\n\r\n  getScore(lines, moves, zombieKilled) {\r\n    const movesFactor = (zombieKilled) ? 0.91 : 1;\r\n    const linesFactor = (zombieKilled) ? 0.95 : 1;\r\n    return Math.ceil(this.base - (lines * 3002 * linesFactor) - (moves * 951 * movesFactor));\r\n  }\r\n}\n\n//# sourceURL=webpack://sidila/./src/score.js?");

/***/ }),

/***/ "./src/sound.js":
/*!**********************!*\
  !*** ./src/sound.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Sound\": () => (/* binding */ Sound)\n/* harmony export */ });\nconst soundBaseUrl = '/sidila/snd/';\r\n\r\nclass Sound {\r\n  constructor(file) {\r\n    this.sound = document.createElement(\"audio\");\r\n    this.sound.src = `${soundBaseUrl}/${file}`;\r\n  }\r\n\r\n  play() {\r\n    this.sound.play();\r\n  }\r\n  pause() {\r\n    this.sound.pause();\r\n  }\r\n}\n\n//# sourceURL=webpack://sidila/./src/sound.js?");

/***/ }),

/***/ "./src/storage.js":
/*!************************!*\
  !*** ./src/storage.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Storage\": () => (/* binding */ Storage)\n/* harmony export */ });\nconst STORAGE_PROGRAM_PREFIX = 'sidila-program-';\r\n\r\nclass Storage {\r\n\r\n  static loadFiles(selectWidget) {\r\n    Storage.emptySelectWidget(selectWidget);\r\n    for (let i=0, len=localStorage.length; i < len; ++i) {\r\n      if (localStorage.key(i).startsWith(STORAGE_PROGRAM_PREFIX)) {\r\n        const option = document.createElement(\"option\");\r\n        option.text = Storage.getFilenameFromKey(localStorage.key(i));\r\n        option.value = localStorage.key(i);\r\n        selectWidget.add(option);\r\n      }\r\n    }\r\n  }\r\n\r\n  static emptySelectWidget(widget) {\r\n    for(let i=1; i<widget.length; i++) {\r\n      widget.remove(i);\r\n    }\r\n  }\r\n\r\n  static loadProgram(nameWidget, programWidget) {\r\n    const key = nameWidget.options[nameWidget.selectedIndex].value;\r\n    if (key != undefined && key != '') {\r\n      programWidget.value = localStorage.getItem(key);\r\n    }\r\n  }\r\n  static saveProgram(nameWidget, programWidget, overwrite) {\r\n    const key = Storage.getKeyFromFilename(nameWidget.value);\r\n    if (localStorage.getItem(key) !== null && !overwrite.checked) {\r\n      throw new Error('Ya existe un programa con ese nombre');\r\n    }\r\n    localStorage.setItem(key, programWidget.value);\r\n  }\r\n\r\n  static getKeyFromFilename(filename) {\r\n    return STORAGE_PROGRAM_PREFIX + filename;\r\n  }\r\n\r\n  static getFilenameFromKey(key) {\r\n    return key.substring(STORAGE_PROGRAM_PREFIX.length, key.length);\r\n  }\r\n}\n\n//# sourceURL=webpack://sidila/./src/storage.js?");

/***/ }),

/***/ "./src/scene/dungeon.json":
/*!********************************!*\
  !*** ./src/scene/dungeon.json ***!
  \********************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"width\":16,\"height\":16,\"player\":{\"x\":12,\"y\":2,\"direction\":\"South\"},\"zombie\":{\"x\":6,\"y\":7},\"theme\":{\"image\":\"dungeon.png\",\"imageWidth\":384,\"imageHeight\":160,\"spriteWidth\":16,\"spriteHeight\":16,\"background\":\"#91b09a\",\"sprite\":{\"north\":189,\"east\":189,\"south\":189,\"west\":189,\"dead\":165,\"nextNorth\":212,\"nextEast\":213,\"nextSouth\":237,\"nextWest\":236,\"zombie\":188,\"deadZombie\":164}},\"logic\":{\"54\":\"Space\",\"172\":\"Exit\",\"173\":\"Exit\",\"174\":\"Exit\",\"175\":\"Exit\",\"190\":\"Sphinx\"},\"space\":54,\"map\":[[5,6,6,6,6,104,6,6,6,6,6,192,193,194,6,7],[29,30,30,147,30,128,30,30,168,30,30,216,217,218,30,31],[53,184,186,54,54,54,54,54,54,54,54,54,54,54,54,55],[102,54,54,54,54,54,54,54,209,210,54,54,54,54,54,75],[76,54,182,54,54,54,54,54,233,234,54,54,54,54,54,99],[100,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[102,54,54,54,54,54,54,54,54,54,8,78,78,127,78,4],[53,54,54,54,54,54,54,54,54,182,99,25,25,25,25,25],[76,54,54,54,54,54,54,54,182,182,55,25,25,25,25,25],[100,54,54,54,54,54,54,54,54,54,56,6,6,6,6,7],[53,54,54,54,54,54,54,54,54,54,80,171,30,174,30,31],[53,54,54,54,190,54,54,158,54,54,54,54,54,54,54,55],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[77,78,78,78,127,78,78,78,78,78,127,78,78,78,78,79]]}');\n\n//# sourceURL=webpack://sidila/./src/scene/dungeon.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.js");
/******/ 	sidila = __webpack_exports__;
/******/ 	
/******/ })()
;