/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var sidila;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/peg.js":
/*!**********************!*\
  !*** ./build/peg.js ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * This file was generated from src/grammar/sidila.peg\n * See https://canopy.jcoglan.com/ for documentation\n */\n\n(function () {\n  'use strict';\n\n  function TreeNode (text, offset, elements) {\n    this.text = text;\n    this.offset = offset;\n    this.elements = elements;\n  }\n\n  TreeNode.prototype.forEach = function (block, context) {\n    for (var el = this.elements, i = 0, n = el.length; i < n; i++) {\n      block.call(context, el[i], i, el);\n    }\n  };\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    TreeNode.prototype[Symbol.iterator] = function () {\n      return this.elements[Symbol.iterator]();\n    };\n  }\n\n  var TreeNode1 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['direction'] = elements[1];\n  };\n  inherit(TreeNode1, TreeNode);\n\n  var FAILURE = {};\n\n  var Grammar = {\n    _read_statement () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._statement = this._cache._statement || {};\n      var cached = this._cache._statement[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = new Array(1);\n        var address2 = FAILURE;\n        var index3 = this._offset;\n        address2 = this._read_turn();\n        if (address2 === FAILURE) {\n          this._offset = index3;\n          address2 = this._read_move();\n          if (address2 === FAILURE) {\n            this._offset = index3;\n          }\n        }\n        if (address2 !== FAILURE) {\n          elements1[0] = address2;\n          var address3 = FAILURE;\n          address3 = this._read_nl();\n          if (address3 !== FAILURE) {\n          } else {\n            elements1 = null;\n            this._offset = index2;\n          }\n        } else {\n          elements1 = null;\n          this._offset = index2;\n        }\n        if (elements1 === null) {\n          address1 = FAILURE;\n        } else {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._statement[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_move () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._move = this._cache._move || {};\n      var cached = this._cache._move[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var chunk0 = null, max0 = this._offset + 7;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'avanzar') {\n        address0 = this._actions.make_move(this._input, this._offset, this._offset + 7, []);\n        this._offset = this._offset + 7;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::move', '\\'avanzar\\'']);\n        }\n      }\n      this._cache._move[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_turn () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._turn = this._cache._turn || {};\n      var cached = this._cache._turn[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(2);\n      var address1 = FAILURE;\n      var chunk0 = null, max0 = this._offset + 5;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'girar') {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset, []);\n        this._offset = this._offset + 5;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::turn', '\\'girar\\'']);\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          var chunk1 = null, max1 = this._offset + 8;\n          if (max1 <= this._inputSize) {\n            chunk1 = this._input.substring(this._offset, max1);\n          }\n          if (chunk1 === 'hacia la') {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 8), this._offset, []);\n            this._offset = this._offset + 8;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::turn', '\\'hacia la\\'']);\n            }\n          }\n          if (address3 !== FAILURE) {\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              address5 = this._read_direction();\n              if (address5 !== FAILURE) {\n                elements0[1] = address5;\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.make_turn(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._turn[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_direction () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._direction = this._cache._direction || {};\n      var cached = this._cache._direction[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset;\n      var chunk0 = null, max0 = this._offset + 9;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'izquierda') {\n        address0 = new TreeNode(this._input.substring(this._offset, this._offset + 9), this._offset, []);\n        this._offset = this._offset + 9;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::direction', '\"izquierda\"']);\n        }\n      }\n      if (address0 === FAILURE) {\n        this._offset = index1;\n        var chunk1 = null, max1 = this._offset + 7;\n        if (max1 <= this._inputSize) {\n          chunk1 = this._input.substring(this._offset, max1);\n        }\n        if (chunk1 === 'derecha') {\n          address0 = new TreeNode(this._input.substring(this._offset, this._offset + 7), this._offset, []);\n          this._offset = this._offset + 7;\n        } else {\n          address0 = FAILURE;\n          if (this._offset > this._failure) {\n            this._failure = this._offset;\n            this._expected = [];\n          }\n          if (this._offset === this._failure) {\n            this._expected.push(['SiDiLa::direction', '\"derecha\"']);\n          }\n        }\n        if (address0 === FAILURE) {\n          this._offset = index1;\n        }\n      }\n      this._cache._direction[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_ws () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._ws = this._cache._ws || {};\n      var cached = this._cache._ws[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = [], address2 = null;\n        while (true) {\n          var chunk0 = null, max0 = this._offset + 1;\n          if (max0 <= this._inputSize) {\n            chunk0 = this._input.substring(this._offset, max0);\n          }\n          if (chunk0 !== null && /^[ \\t]/.test(chunk0)) {\n            address2 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n            this._offset = this._offset + 1;\n          } else {\n            address2 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::ws', '[ \\\\t]']);\n            }\n          }\n          if (address2 !== FAILURE) {\n            elements1.push(address2);\n          } else {\n            break;\n          }\n        }\n        if (elements1.length >= 1) {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        } else {\n          address1 = FAILURE;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._ws[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_nl () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._nl = this._cache._nl || {};\n      var cached = this._cache._nl[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = [], address2 = null;\n        while (true) {\n          var chunk0 = null, max0 = this._offset + 1;\n          if (max0 <= this._inputSize) {\n            chunk0 = this._input.substring(this._offset, max0);\n          }\n          if (chunk0 !== null && /^[\\r\\n]/.test(chunk0)) {\n            address2 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n            this._offset = this._offset + 1;\n          } else {\n            address2 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::nl', '[\\\\r\\\\n]']);\n            }\n          }\n          if (address2 !== FAILURE) {\n            elements1.push(address2);\n          } else {\n            break;\n          }\n        }\n        if (elements1.length >= 1) {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        } else {\n          address1 = FAILURE;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._nl[index0] = [address0, this._offset];\n      return address0;\n    }\n  };\n\n  var Parser = function(input, actions, types) {\n    this._input = input;\n    this._inputSize = input.length;\n    this._actions = actions;\n    this._types = types;\n    this._offset = 0;\n    this._cache = {};\n    this._failure = 0;\n    this._expected = [];\n  };\n\n  Parser.prototype.parse = function() {\n    var tree = this._read_statement();\n    if (tree !== FAILURE && this._offset === this._inputSize) {\n      return tree;\n    }\n    if (this._expected.length === 0) {\n      this._failure = this._offset;\n      this._expected.push(['SiDiLa', '<EOF>']);\n    }\n    this.constructor.lastError = { offset: this._offset, expected: this._expected };\n    throw new SyntaxError(formatError(this._input, this._failure, this._expected));\n  };\n\n  Object.assign(Parser.prototype, Grammar);\n\n\n  function parse(input, options) {\n    options = options || {};\n    var parser = new Parser(input, options.actions, options.types);\n    return parser.parse();\n  }\n\n  function formatError(input, offset, expected) {\n    var lines = input.split(/\\n/g),\n        lineNo = 0,\n        position = 0;\n\n    while (position <= offset) {\n      position += lines[lineNo].length + 1;\n      lineNo += 1;\n    }\n\n    var line = lines[lineNo - 1],\n        message = 'Line ' + lineNo + ': expected one of:\\n\\n';\n\n    for (var i = 0; i < expected.length; i++) {\n      message += '    - ' + expected[i][1] + ' from ' + expected[i][0] + '\\n';\n    }\n    var number = lineNo.toString();\n    while (number.length < 6) number = ' ' + number;\n    message += '\\n' + number + ' | ' + line + '\\n';\n\n    position -= line.length + 10;\n\n    while (position < offset) {\n      message += ' ';\n      position += 1;\n    }\n    return message + '^';\n  }\n\n  function inherit(subclass, parent) {\n    function chain () {};\n    chain.prototype = parent.prototype;\n    subclass.prototype = new chain();\n    subclass.prototype.constructor = subclass;\n  }\n\n\n  var exported = { Grammar: Grammar, Parser: Parser, parse: parse };\n\n  if (true) {\n    Object.assign(exports, exported);\n  } else { var ns; }\n})();\n\n\n//# sourceURL=webpack://sidila/./build/peg.js?");

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AsciiPainter\": () => (/* reexport safe */ _drawing__WEBPACK_IMPORTED_MODULE_1__.AsciiPainter),\n/* harmony export */   \"BasicPainter\": () => (/* reexport safe */ _drawing__WEBPACK_IMPORTED_MODULE_1__.BasicPainter),\n/* harmony export */   \"Board\": () => (/* reexport safe */ _game_board__WEBPACK_IMPORTED_MODULE_0__.Board),\n/* harmony export */   \"CardinalDirection\": () => (/* reexport safe */ _game_board__WEBPACK_IMPORTED_MODULE_0__.CardinalDirection),\n/* harmony export */   \"Game\": () => (/* reexport safe */ _game__WEBPACK_IMPORTED_MODULE_2__.Game),\n/* harmony export */   \"Player\": () => (/* reexport safe */ _game_board__WEBPACK_IMPORTED_MODULE_0__.Player),\n/* harmony export */   \"maps\": () => (/* binding */ maps),\n/* harmony export */   \"parse\": () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _game_board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game-board */ \"./src/game-board.js\");\n/* harmony import */ var _drawing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drawing */ \"./src/drawing.js\");\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n\n\n\n\n\n\nconst maps = __webpack_require__(/*! ../build/peg */ \"./build/peg.js\");\n\nclass Actions {\n  make_move (input, start, end, elements) {\n    return {action: 'move'};\n  }\n  make_turn (input, start, end, elements) {\n    return {action: 'turn', direction: elements[1].text};\n  }\n};\n\nfunction parse(code) {\n  return maps.parse(code, { actions: new Actions() })\n}\n\n//# sourceURL=webpack://sidila/./src/app.js?");

/***/ }),

/***/ "./src/drawing.js":
/*!************************!*\
  !*** ./src/drawing.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AsciiPainter\": () => (/* binding */ AsciiPainter),\n/* harmony export */   \"BasicPainter\": () => (/* binding */ BasicPainter)\n/* harmony export */ });\n// ASCII Painting\nclass AsciiPainter {\n  static paint(board) {\n    let drawing = '';\n    for(let y=0; y < board.side; y++) {\n      for(let x=0; x < board.side; x++) {\n        drawing += board.getPieceSymbol(x, y);\n      }\n      drawing += '\\n';\n    }\n    return drawing;\n  }\n}\n\nclass BasicPainter {\n  static paint(board) {\n    let drawing = '<div class=\"sidila-row\">';\n    for(let y=0; y < board.side; y++) {\n      for(let x=0; x < board.side; x++) {\n        drawing += this.getImageTag(board.getPieceSymbol(x, y));\n      }\n      drawing += '</div><div class=\"sidila-row\">';\n    }\n    drawing += '</div>';\n    return drawing;\n  }\n\n  static getImageTag(symbol) {\n    switch(symbol) {\n      case '█': return this.getBaseTag('wall.png');\n      case '░': return this.getBaseTag('exit.png');\n      case ' ': return this.getBaseTag('space.png');\n      case '▲': return this.getBaseTag('player-n.png');\n      case '▶': return this.getBaseTag('player-e.png');\n      case '▼': return this.getBaseTag('player-s.png');\n      case '◀': return this.getBaseTag('player-w.png');\n      case '✟': return this.getBaseTag('skull.png');\n    }\n  }\n\n  static getBaseTag(image) {\n    return `<img src=\"/sidila/img/${image}\">`\n  }\n}\n\n\n//# sourceURL=webpack://sidila/./src/drawing.js?");

/***/ }),

/***/ "./src/game-board.js":
/*!***************************!*\
  !*** ./src/game-board.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Board\": () => (/* binding */ Board),\n/* harmony export */   \"CardinalDirection\": () => (/* binding */ CardinalDirection),\n/* harmony export */   \"Player\": () => (/* binding */ Player)\n/* harmony export */ });\n// Enums\nclass Block {\n  static Wall = new Block(\"█\");\n  static Exit = new Block(\"░\");\n  static Space = new Block(\" \");\n\n  constructor(symbol) {\n    this.symbol = symbol;\n  }\n}\n\nclass CardinalDirection {\n  static North = new CardinalDirection(\"▲\", position => ({x: position.x, y: position.y-1}));\n  static East = new CardinalDirection(\"▶\", position => ({x: position.x+1, y: position.y}));\n  static South = new CardinalDirection(\"▼\", position => ({x: position.x, y: position.y+1}));\n  static West = new CardinalDirection(\"◀\", position => ({x: position.x-1, y: position.y}));\n\n  constructor(symbol, action) {\n    this.symbol = symbol;\n    this.action = action;\n  }\n\n  advance(position) {\n    return this.action(position);\n  }\n\n  static order = [this.North, this.East, this.South, this.West];\n  static toTheRight(direction) {\n    const index = this.order.indexOf(direction) + 1;\n    return this.order[index % 4];\n  }\n\n  static toTheLeft(direction) {\n    const index = this.order.indexOf(direction) - 1;\n    return this.order[((index > -1) ? index : 3)];\n  }\n}\n\nclass Player {\n  constructor(x, y, direction) {\n    this.x = x;\n    this.y = y;\n    this.direction = direction;\n    this.crashed = false;\n  }\n\n  getSymbol() {\n    if (this.crashed) {\n      return '✟';\n    }\n    return this.direction.symbol;\n  }\n\n  move() {\n    const newPosition = this.direction.advance(this);\n    this.x = newPosition.x;\n    this.y = newPosition.y;\n  }\n\n  crash() {\n    this.crashed = true;\n  }\n\n  wouldMove() {\n    return this.direction.advance(this);\n  }\n\n  isAt(x, y) {\n    return this.x == x && this.y == y;\n  }\n\n  rotateLeft() {\n    this.direction = CardinalDirection.toTheLeft(this.direction);\n  }\n  rotateRight() {\n    this.direction = CardinalDirection.toTheRight(this.direction);\n  }\n}\n\nclass Board {\n  constructor(side, player) {\n    this.player = player;\n    this.side = side;\n    this.board = [];\n    for(let i=0; i < side; i++) {\n      this.board[i] = [];\n      for(let j=0; j < side; j++) {\n        this.board[i][j] = Block.Space;\n      }\n    }\n    this.boardLoadHardcoded();\n  }\n\n  // TODO: Write code to load different boards\n  boardLoadHardcoded() {\n    for(let i=0; i < this.side; i++) {\n      this.board[i][0] = Block.Wall;\n      this.board[i][this.side - 1] = Block.Wall;\n      this.board[0][i] = Block.Wall;\n      this.board[this.side - 1][i] = Block.Wall;\n    }\n    this.board[this.side - 1][this.side - 2] = Block.Exit;\n  }\n\n  canMoveInto(x, y) {\n    return this.board[x][y] === Block.Space;\n  }\n\n  isCrashed() {\n    return this.player.crashed;\n  }\n\n  movePlayer() {\n    const newPosition = this.player.wouldMove();\n    if (this.canMoveInto(newPosition.x, newPosition.y)) {\n      this.player.move();\n    } else {\n      this.player.crash();\n    }\n  }\n  rotatePlayerLeft() {\n    this.player.rotateLeft();\n  }\n  rotatePlayerRight() {\n    this.player.rotateRight();\n  }\n\n  getPieceSymbol(x, y) {\n    if (this.player.isAt(x, y)) {\n      return this.player.getSymbol();\n    } else {\n      return this.board[x][y].symbol;\n    }\n  }\n}\n\n\n//# sourceURL=webpack://sidila/./src/game-board.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": () => (/* binding */ Game)\n/* harmony export */ });\nclass Game {\n  static processStatement(tree, gameTicks, board) {\n    const statement = tree.elements[gameTicks];\n    this.tryExecuting(statement, board);\n  }\n\n  static tryExecuting(statement, board) {\n    console.log(statement.text);\n    const node = statement.elements[0];\n    const action = node.action;\n    switch(action) {\n      case 'move':\n        board.movePlayer();\n        break;\n      case 'turn':\n        if (node.direction === 'derecha') {\n          board.rotatePlayerRight();\n        } else  {\n          board.rotatePlayerLeft();\n        }\n        break;\n    }\n  }\n}\n\n//# sourceURL=webpack://sidila/./src/game.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.js");
/******/ 	sidila = __webpack_exports__;
/******/ 	
/******/ })()
;