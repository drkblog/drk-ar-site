var sidila;(()=>{var __webpack_modules__={498:(__unused_webpack_module,exports)=>{eval("/**\n * This file was generated from src\\grammar\\sidila.peg\n * See https://canopy.jcoglan.com/ for documentation\n */\n\n(function () {\n  'use strict';\n\n  function TreeNode (text, offset, elements) {\n    this.text = text;\n    this.offset = offset;\n    this.elements = elements;\n  }\n\n  TreeNode.prototype.forEach = function (block, context) {\n    for (var el = this.elements, i = 0, n = el.length; i < n; i++) {\n      block.call(context, el[i], i, el);\n    }\n  };\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    TreeNode.prototype[Symbol.iterator] = function () {\n      return this.elements[Symbol.iterator]();\n    };\n  }\n\n  var TreeNode1 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['condition'] = elements[1];\n    this['body'] = elements[2];\n  };\n  inherit(TreeNode1, TreeNode);\n\n  var TreeNode2 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['condition'] = elements[1];\n    this['body'] = elements[2];\n  };\n  inherit(TreeNode2, TreeNode);\n\n  var TreeNode3 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['body'] = elements[1];\n  };\n  inherit(TreeNode3, TreeNode);\n\n  var TreeNode4 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['not'] = elements[0];\n  };\n  inherit(TreeNode4, TreeNode);\n\n  var TreeNode5 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['not'] = elements[0];\n    this['sprite'] = elements[2];\n    this['look_up_direction'] = elements[3];\n  };\n  inherit(TreeNode5, TreeNode);\n\n  var TreeNode6 = function (text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['direction'] = elements[1];\n  };\n  inherit(TreeNode6, TreeNode);\n\n  var FAILURE = {};\n\n  var Grammar = {\n    _read_body () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._body = this._cache._body || {};\n      var cached = this._cache._body[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = new Array(1);\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          var index3 = this._offset;\n          address3 = this._read_turn();\n          if (address3 === FAILURE) {\n            this._offset = index3;\n            address3 = this._read_move();\n            if (address3 === FAILURE) {\n              this._offset = index3;\n              address3 = this._read_back();\n              if (address3 === FAILURE) {\n                this._offset = index3;\n                address3 = this._read_shoot();\n                if (address3 === FAILURE) {\n                  this._offset = index3;\n                  address3 = this._read_branch();\n                  if (address3 === FAILURE) {\n                    this._offset = index3;\n                    address3 = this._read_loop();\n                    if (address3 === FAILURE) {\n                      this._offset = index3;\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (address3 !== FAILURE) {\n            elements1[0] = address3;\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              address5 = this._read_nl();\n              if (address5 !== FAILURE) {\n              } else {\n                elements1 = null;\n                this._offset = index2;\n              }\n            } else {\n              elements1 = null;\n              this._offset = index2;\n            }\n          } else {\n            elements1 = null;\n            this._offset = index2;\n          }\n        } else {\n          elements1 = null;\n          this._offset = index2;\n        }\n        if (elements1 === null) {\n          address1 = FAILURE;\n        } else {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._body[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_loop () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._loop = this._cache._loop || {};\n      var cached = this._cache._loop[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(3);\n      var address1 = FAILURE;\n      var chunk0 = null, max0 = this._offset + 8;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'mientras') {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 8), this._offset, []);\n        this._offset = this._offset + 8;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::loop', '\\'mientras\\'']);\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          address3 = this._read_condition();\n          if (address3 !== FAILURE) {\n            elements0[1] = address3;\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              var chunk1 = null, max1 = this._offset + 1;\n              if (max1 <= this._inputSize) {\n                chunk1 = this._input.substring(this._offset, max1);\n              }\n              if (chunk1 === '(') {\n                address5 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n                this._offset = this._offset + 1;\n              } else {\n                address5 = FAILURE;\n                if (this._offset > this._failure) {\n                  this._failure = this._offset;\n                  this._expected = [];\n                }\n                if (this._offset === this._failure) {\n                  this._expected.push(['SiDiLa::loop', '\\'(\\'']);\n                }\n              }\n              if (address5 !== FAILURE) {\n                var address6 = FAILURE;\n                address6 = this._read_nl();\n                if (address6 !== FAILURE) {\n                  var address7 = FAILURE;\n                  address7 = this._read_body();\n                  if (address7 !== FAILURE) {\n                    elements0[2] = address7;\n                    var address8 = FAILURE;\n                    address8 = this._read_nl();\n                    if (address8 !== FAILURE) {\n                      var address9 = FAILURE;\n                      address9 = this._read_ws();\n                      if (address9 !== FAILURE) {\n                        var address10 = FAILURE;\n                        var chunk2 = null, max2 = this._offset + 1;\n                        if (max2 <= this._inputSize) {\n                          chunk2 = this._input.substring(this._offset, max2);\n                        }\n                        if (chunk2 === ')') {\n                          address10 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n                          this._offset = this._offset + 1;\n                        } else {\n                          address10 = FAILURE;\n                          if (this._offset > this._failure) {\n                            this._failure = this._offset;\n                            this._expected = [];\n                          }\n                          if (this._offset === this._failure) {\n                            this._expected.push(['SiDiLa::loop', '\\')\\'']);\n                          }\n                        }\n                        if (address10 !== FAILURE) {\n                        } else {\n                          elements0 = null;\n                          this._offset = index1;\n                        }\n                      } else {\n                        elements0 = null;\n                        this._offset = index1;\n                      }\n                    } else {\n                      elements0 = null;\n                      this._offset = index1;\n                    }\n                  } else {\n                    elements0 = null;\n                    this._offset = index1;\n                  }\n                } else {\n                  elements0 = null;\n                  this._offset = index1;\n                }\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.makeLoop(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._loop[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_branch () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._branch = this._cache._branch || {};\n      var cached = this._cache._branch[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(4);\n      var address1 = FAILURE;\n      var chunk0 = null, max0 = this._offset + 2;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'si') {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 2), this._offset, []);\n        this._offset = this._offset + 2;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::branch', '\\'si\\'']);\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          address3 = this._read_condition();\n          if (address3 !== FAILURE) {\n            elements0[1] = address3;\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              var chunk1 = null, max1 = this._offset + 1;\n              if (max1 <= this._inputSize) {\n                chunk1 = this._input.substring(this._offset, max1);\n              }\n              if (chunk1 === '(') {\n                address5 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n                this._offset = this._offset + 1;\n              } else {\n                address5 = FAILURE;\n                if (this._offset > this._failure) {\n                  this._failure = this._offset;\n                  this._expected = [];\n                }\n                if (this._offset === this._failure) {\n                  this._expected.push(['SiDiLa::branch', '\\'(\\'']);\n                }\n              }\n              if (address5 !== FAILURE) {\n                var address6 = FAILURE;\n                address6 = this._read_nl();\n                if (address6 !== FAILURE) {\n                  var address7 = FAILURE;\n                  address7 = this._read_body();\n                  if (address7 !== FAILURE) {\n                    elements0[2] = address7;\n                    var address8 = FAILURE;\n                    address8 = this._read_nl();\n                    if (address8 !== FAILURE) {\n                      var address9 = FAILURE;\n                      address9 = this._read_ws();\n                      if (address9 !== FAILURE) {\n                        var address10 = FAILURE;\n                        var chunk2 = null, max2 = this._offset + 1;\n                        if (max2 <= this._inputSize) {\n                          chunk2 = this._input.substring(this._offset, max2);\n                        }\n                        if (chunk2 === ')') {\n                          address10 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n                          this._offset = this._offset + 1;\n                        } else {\n                          address10 = FAILURE;\n                          if (this._offset > this._failure) {\n                            this._failure = this._offset;\n                            this._expected = [];\n                          }\n                          if (this._offset === this._failure) {\n                            this._expected.push(['SiDiLa::branch', '\\')\\'']);\n                          }\n                        }\n                        if (address10 !== FAILURE) {\n                          var address11 = FAILURE;\n                          var index2 = this._offset;\n                          var index3 = this._offset, elements1 = new Array(2);\n                          var address12 = FAILURE;\n                          address12 = this._read_ws();\n                          if (address12 !== FAILURE) {\n                            var address13 = FAILURE;\n                            var chunk3 = null, max3 = this._offset + 5;\n                            if (max3 <= this._inputSize) {\n                              chunk3 = this._input.substring(this._offset, max3);\n                            }\n                            if (chunk3 === 'si no') {\n                              address13 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset, []);\n                              this._offset = this._offset + 5;\n                            } else {\n                              address13 = FAILURE;\n                              if (this._offset > this._failure) {\n                                this._failure = this._offset;\n                                this._expected = [];\n                              }\n                              if (this._offset === this._failure) {\n                                this._expected.push(['SiDiLa::branch', '\\'si no\\'']);\n                              }\n                            }\n                            if (address13 !== FAILURE) {\n                              elements1[0] = address13;\n                              var address14 = FAILURE;\n                              address14 = this._read_ws();\n                              if (address14 !== FAILURE) {\n                                var address15 = FAILURE;\n                                var chunk4 = null, max4 = this._offset + 1;\n                                if (max4 <= this._inputSize) {\n                                  chunk4 = this._input.substring(this._offset, max4);\n                                }\n                                if (chunk4 === '(') {\n                                  address15 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n                                  this._offset = this._offset + 1;\n                                } else {\n                                  address15 = FAILURE;\n                                  if (this._offset > this._failure) {\n                                    this._failure = this._offset;\n                                    this._expected = [];\n                                  }\n                                  if (this._offset === this._failure) {\n                                    this._expected.push(['SiDiLa::branch', '\\'(\\'']);\n                                  }\n                                }\n                                if (address15 !== FAILURE) {\n                                  var address16 = FAILURE;\n                                  address16 = this._read_nl();\n                                  if (address16 !== FAILURE) {\n                                    var address17 = FAILURE;\n                                    address17 = this._read_body();\n                                    if (address17 !== FAILURE) {\n                                      elements1[1] = address17;\n                                      var address18 = FAILURE;\n                                      address18 = this._read_nl();\n                                      if (address18 !== FAILURE) {\n                                        var address19 = FAILURE;\n                                        address19 = this._read_ws();\n                                        if (address19 !== FAILURE) {\n                                          var address20 = FAILURE;\n                                          var chunk5 = null, max5 = this._offset + 1;\n                                          if (max5 <= this._inputSize) {\n                                            chunk5 = this._input.substring(this._offset, max5);\n                                          }\n                                          if (chunk5 === ')') {\n                                            address20 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n                                            this._offset = this._offset + 1;\n                                          } else {\n                                            address20 = FAILURE;\n                                            if (this._offset > this._failure) {\n                                              this._failure = this._offset;\n                                              this._expected = [];\n                                            }\n                                            if (this._offset === this._failure) {\n                                              this._expected.push(['SiDiLa::branch', '\\')\\'']);\n                                            }\n                                          }\n                                          if (address20 !== FAILURE) {\n                                          } else {\n                                            elements1 = null;\n                                            this._offset = index3;\n                                          }\n                                        } else {\n                                          elements1 = null;\n                                          this._offset = index3;\n                                        }\n                                      } else {\n                                        elements1 = null;\n                                        this._offset = index3;\n                                      }\n                                    } else {\n                                      elements1 = null;\n                                      this._offset = index3;\n                                    }\n                                  } else {\n                                    elements1 = null;\n                                    this._offset = index3;\n                                  }\n                                } else {\n                                  elements1 = null;\n                                  this._offset = index3;\n                                }\n                              } else {\n                                elements1 = null;\n                                this._offset = index3;\n                              }\n                            } else {\n                              elements1 = null;\n                              this._offset = index3;\n                            }\n                          } else {\n                            elements1 = null;\n                            this._offset = index3;\n                          }\n                          if (elements1 === null) {\n                            address11 = FAILURE;\n                          } else {\n                            address11 = new TreeNode3(this._input.substring(index3, this._offset), index3, elements1);\n                            this._offset = this._offset;\n                          }\n                          if (address11 === FAILURE) {\n                            address11 = new TreeNode(this._input.substring(index2, index2), index2, []);\n                            this._offset = index2;\n                          }\n                          if (address11 !== FAILURE) {\n                            elements0[3] = address11;\n                          } else {\n                            elements0 = null;\n                            this._offset = index1;\n                          }\n                        } else {\n                          elements0 = null;\n                          this._offset = index1;\n                        }\n                      } else {\n                        elements0 = null;\n                        this._offset = index1;\n                      }\n                    } else {\n                      elements0 = null;\n                      this._offset = index1;\n                    }\n                  } else {\n                    elements0 = null;\n                    this._offset = index1;\n                  }\n                } else {\n                  elements0 = null;\n                  this._offset = index1;\n                }\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.makeBranch(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._branch[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_condition () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._condition = this._cache._condition || {};\n      var cached = this._cache._condition[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset;\n      address0 = this._read_ahead_condition();\n      if (address0 === FAILURE) {\n        this._offset = index1;\n        address0 = this._read_in_game_condition();\n        if (address0 === FAILURE) {\n          this._offset = index1;\n        }\n      }\n      this._cache._condition[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_in_game_condition () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._in_game_condition = this._cache._in_game_condition || {};\n      var cached = this._cache._in_game_condition[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(2);\n      var address1 = FAILURE;\n      address1 = this._read_not();\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          var chunk0 = null, max0 = this._offset + 11;\n          if (max0 <= this._inputSize) {\n            chunk0 = this._input.substring(this._offset, max0);\n          }\n          if (chunk0 === 'haya salido') {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 11), this._offset, []);\n            this._offset = this._offset + 11;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::in_game_condition', '\\'haya salido\\'']);\n            }\n          }\n          if (address3 !== FAILURE) {\n            elements0[1] = address3;\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.makeInGameCondition(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._in_game_condition[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_ahead_condition () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._ahead_condition = this._cache._ahead_condition || {};\n      var cached = this._cache._ahead_condition[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(4);\n      var address1 = FAILURE;\n      address1 = this._read_not();\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          var chunk0 = null, max0 = this._offset + 3;\n          if (max0 <= this._inputSize) {\n            chunk0 = this._input.substring(this._offset, max0);\n          }\n          if (chunk0 === 'hay') {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 3), this._offset, []);\n            this._offset = this._offset + 3;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::ahead_condition', '\\'hay\\'']);\n            }\n          }\n          if (address3 !== FAILURE) {\n            elements0[1] = address3;\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              address5 = this._read_sprite();\n              if (address5 !== FAILURE) {\n                elements0[2] = address5;\n                var address6 = FAILURE;\n                address6 = this._read_ws();\n                if (address6 !== FAILURE) {\n                  var address7 = FAILURE;\n                  address7 = this._read_look_up_direction();\n                  if (address7 !== FAILURE) {\n                    elements0[3] = address7;\n                  } else {\n                    elements0 = null;\n                    this._offset = index1;\n                  }\n                } else {\n                  elements0 = null;\n                  this._offset = index1;\n                }\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.makeLookAheadCondition(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._ahead_condition[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_not () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._not = this._cache._not || {};\n      var cached = this._cache._not[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset;\n      var chunk0 = null, max0 = this._offset + 2;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'no') {\n        address0 = new TreeNode(this._input.substring(this._offset, this._offset + 2), this._offset, []);\n        this._offset = this._offset + 2;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::not', '\\'no\\'']);\n        }\n      }\n      if (address0 === FAILURE) {\n        address0 = new TreeNode(this._input.substring(index1, index1), index1, []);\n        this._offset = index1;\n      }\n      this._cache._not[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_sprite () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._sprite = this._cache._sprite || {};\n      var cached = this._cache._sprite[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset;\n      var chunk0 = null, max0 = this._offset + 5;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'pared') {\n        address0 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset, []);\n        this._offset = this._offset + 5;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::sprite', '\\'pared\\'']);\n        }\n      }\n      if (address0 === FAILURE) {\n        this._offset = index1;\n        var chunk1 = null, max1 = this._offset + 4;\n        if (max1 <= this._inputSize) {\n          chunk1 = this._input.substring(this._offset, max1);\n        }\n        if (chunk1 === 'algo') {\n          address0 = new TreeNode(this._input.substring(this._offset, this._offset + 4), this._offset, []);\n          this._offset = this._offset + 4;\n        } else {\n          address0 = FAILURE;\n          if (this._offset > this._failure) {\n            this._failure = this._offset;\n            this._expected = [];\n          }\n          if (this._offset === this._failure) {\n            this._expected.push(['SiDiLa::sprite', '\\'algo\\'']);\n          }\n        }\n        if (address0 === FAILURE) {\n          this._offset = index1;\n          var chunk2 = null, max2 = this._offset + 6;\n          if (max2 <= this._inputSize) {\n            chunk2 = this._input.substring(this._offset, max2);\n          }\n          if (chunk2 === 'zombie') {\n            address0 = new TreeNode(this._input.substring(this._offset, this._offset + 6), this._offset, []);\n            this._offset = this._offset + 6;\n          } else {\n            address0 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::sprite', '\\'zombie\\'']);\n            }\n          }\n          if (address0 === FAILURE) {\n            this._offset = index1;\n            var chunk3 = null, max3 = this._offset + 7;\n            if (max3 <= this._inputSize) {\n              chunk3 = this._input.substring(this._offset, max3);\n            }\n            if (chunk3 === 'espacio') {\n              address0 = new TreeNode(this._input.substring(this._offset, this._offset + 7), this._offset, []);\n              this._offset = this._offset + 7;\n            } else {\n              address0 = FAILURE;\n              if (this._offset > this._failure) {\n                this._failure = this._offset;\n                this._expected = [];\n              }\n              if (this._offset === this._failure) {\n                this._expected.push(['SiDiLa::sprite', '\\'espacio\\'']);\n              }\n            }\n            if (address0 === FAILURE) {\n              this._offset = index1;\n              var chunk4 = null, max4 = this._offset + 6;\n              if (max4 <= this._inputSize) {\n                chunk4 = this._input.substring(this._offset, max4);\n              }\n              if (chunk4 === 'salida') {\n                address0 = new TreeNode(this._input.substring(this._offset, this._offset + 6), this._offset, []);\n                this._offset = this._offset + 6;\n              } else {\n                address0 = FAILURE;\n                if (this._offset > this._failure) {\n                  this._failure = this._offset;\n                  this._expected = [];\n                }\n                if (this._offset === this._failure) {\n                  this._expected.push(['SiDiLa::sprite', '\\'salida\\'']);\n                }\n              }\n              if (address0 === FAILURE) {\n                this._offset = index1;\n              }\n            }\n          }\n        }\n      }\n      this._cache._sprite[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_look_up_direction () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._look_up_direction = this._cache._look_up_direction || {};\n      var cached = this._cache._look_up_direction[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset;\n      var chunk0 = null, max0 = this._offset + 8;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'adelante') {\n        address0 = new TreeNode(this._input.substring(this._offset, this._offset + 8), this._offset, []);\n        this._offset = this._offset + 8;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::look_up_direction', '\\'adelante\\'']);\n        }\n      }\n      if (address0 === FAILURE) {\n        this._offset = index1;\n        var chunk1 = null, max1 = this._offset + 14;\n        if (max1 <= this._inputSize) {\n          chunk1 = this._input.substring(this._offset, max1);\n        }\n        if (chunk1 === 'a la izquierda') {\n          address0 = new TreeNode(this._input.substring(this._offset, this._offset + 14), this._offset, []);\n          this._offset = this._offset + 14;\n        } else {\n          address0 = FAILURE;\n          if (this._offset > this._failure) {\n            this._failure = this._offset;\n            this._expected = [];\n          }\n          if (this._offset === this._failure) {\n            this._expected.push(['SiDiLa::look_up_direction', '\\'a la izquierda\\'']);\n          }\n        }\n        if (address0 === FAILURE) {\n          this._offset = index1;\n          var chunk2 = null, max2 = this._offset + 12;\n          if (max2 <= this._inputSize) {\n            chunk2 = this._input.substring(this._offset, max2);\n          }\n          if (chunk2 === 'a la derecha') {\n            address0 = new TreeNode(this._input.substring(this._offset, this._offset + 12), this._offset, []);\n            this._offset = this._offset + 12;\n          } else {\n            address0 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::look_up_direction', '\\'a la derecha\\'']);\n            }\n          }\n          if (address0 === FAILURE) {\n            this._offset = index1;\n          }\n        }\n      }\n      this._cache._look_up_direction[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_move () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._move = this._cache._move || {};\n      var cached = this._cache._move[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var chunk0 = null, max0 = this._offset + 7;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'avanzar') {\n        address0 = this._actions.makeMove(this._input, this._offset, this._offset + 7, []);\n        this._offset = this._offset + 7;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::move', '\\'avanzar\\'']);\n        }\n      }\n      this._cache._move[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_back () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._back = this._cache._back || {};\n      var cached = this._cache._back[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var chunk0 = null, max0 = this._offset + 10;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'retroceder') {\n        address0 = this._actions.makeBack(this._input, this._offset, this._offset + 10, []);\n        this._offset = this._offset + 10;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::back', '\\'retroceder\\'']);\n        }\n      }\n      this._cache._back[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_shoot () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._shoot = this._cache._shoot || {};\n      var cached = this._cache._shoot[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var chunk0 = null, max0 = this._offset + 8;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'disparar') {\n        address0 = this._actions.makeShoot(this._input, this._offset, this._offset + 8, []);\n        this._offset = this._offset + 8;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::shoot', '\\'disparar\\'']);\n        }\n      }\n      this._cache._shoot[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_turn () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._turn = this._cache._turn || {};\n      var cached = this._cache._turn[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(2);\n      var address1 = FAILURE;\n      var chunk0 = null, max0 = this._offset + 5;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'girar') {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset, []);\n        this._offset = this._offset + 5;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::turn', '\\'girar\\'']);\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        address2 = this._read_ws();\n        if (address2 !== FAILURE) {\n          var address3 = FAILURE;\n          var chunk1 = null, max1 = this._offset + 5;\n          if (max1 <= this._inputSize) {\n            chunk1 = this._input.substring(this._offset, max1);\n          }\n          if (chunk1 === 'hacia') {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset, []);\n            this._offset = this._offset + 5;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::turn', '\\'hacia\\'']);\n            }\n          }\n          if (address3 !== FAILURE) {\n            var address4 = FAILURE;\n            address4 = this._read_ws();\n            if (address4 !== FAILURE) {\n              var address5 = FAILURE;\n              address5 = this._read_direction();\n              if (address5 !== FAILURE) {\n                elements0[1] = address5;\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = this._actions.makeTurn(this._input, index1, this._offset, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._turn[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_direction () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._direction = this._cache._direction || {};\n      var cached = this._cache._direction[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset;\n      var chunk0 = null, max0 = this._offset + 12;\n      if (max0 <= this._inputSize) {\n        chunk0 = this._input.substring(this._offset, max0);\n      }\n      if (chunk0 === 'la izquierda') {\n        address0 = new TreeNode(this._input.substring(this._offset, this._offset + 12), this._offset, []);\n        this._offset = this._offset + 12;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push(['SiDiLa::direction', '\\'la izquierda\\'']);\n        }\n      }\n      if (address0 === FAILURE) {\n        this._offset = index1;\n        var chunk1 = null, max1 = this._offset + 10;\n        if (max1 <= this._inputSize) {\n          chunk1 = this._input.substring(this._offset, max1);\n        }\n        if (chunk1 === 'la derecha') {\n          address0 = new TreeNode(this._input.substring(this._offset, this._offset + 10), this._offset, []);\n          this._offset = this._offset + 10;\n        } else {\n          address0 = FAILURE;\n          if (this._offset > this._failure) {\n            this._failure = this._offset;\n            this._expected = [];\n          }\n          if (this._offset === this._failure) {\n            this._expected.push(['SiDiLa::direction', '\\'la derecha\\'']);\n          }\n        }\n        if (address0 === FAILURE) {\n          this._offset = index1;\n          var chunk2 = null, max2 = this._offset + 5;\n          if (max2 <= this._inputSize) {\n            chunk2 = this._input.substring(this._offset, max2);\n          }\n          if (chunk2 === 'atras') {\n            address0 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset, []);\n            this._offset = this._offset + 5;\n          } else {\n            address0 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::direction', '\\'atras\\'']);\n            }\n          }\n          if (address0 === FAILURE) {\n            this._offset = index1;\n          }\n        }\n      }\n      this._cache._direction[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_ws () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._ws = this._cache._ws || {};\n      var cached = this._cache._ws[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = [], address2 = null;\n        while (true) {\n          var chunk0 = null, max0 = this._offset + 1;\n          if (max0 <= this._inputSize) {\n            chunk0 = this._input.substring(this._offset, max0);\n          }\n          if (chunk0 !== null && /^[ \\t]/.test(chunk0)) {\n            address2 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n            this._offset = this._offset + 1;\n          } else {\n            address2 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::ws', '[ \\\\t]']);\n            }\n          }\n          if (address2 !== FAILURE) {\n            elements1.push(address2);\n          } else {\n            break;\n          }\n        }\n        if (elements1.length >= 1) {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        } else {\n          address1 = FAILURE;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._ws[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_nl () {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._nl = this._cache._nl || {};\n      var cached = this._cache._nl[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = [], address1 = null;\n      while (true) {\n        var index2 = this._offset, elements1 = [], address2 = null;\n        while (true) {\n          var chunk0 = null, max0 = this._offset + 1;\n          if (max0 <= this._inputSize) {\n            chunk0 = this._input.substring(this._offset, max0);\n          }\n          if (chunk0 !== null && /^[\\r\\n]/.test(chunk0)) {\n            address2 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset, []);\n            this._offset = this._offset + 1;\n          } else {\n            address2 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push(['SiDiLa::nl', '[\\\\r\\\\n]']);\n            }\n          }\n          if (address2 !== FAILURE) {\n            elements1.push(address2);\n          } else {\n            break;\n          }\n        }\n        if (elements1.length >= 1) {\n          address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        } else {\n          address1 = FAILURE;\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n        } else {\n          break;\n        }\n      }\n      if (elements0.length >= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._nl[index0] = [address0, this._offset];\n      return address0;\n    }\n  };\n\n  var Parser = function(input, actions, types) {\n    this._input = input;\n    this._inputSize = input.length;\n    this._actions = actions;\n    this._types = types;\n    this._offset = 0;\n    this._cache = {};\n    this._failure = 0;\n    this._expected = [];\n  };\n\n  Parser.prototype.parse = function() {\n    var tree = this._read_body();\n    if (tree !== FAILURE && this._offset === this._inputSize) {\n      return tree;\n    }\n    if (this._expected.length === 0) {\n      this._failure = this._offset;\n      this._expected.push(['SiDiLa', '<EOF>']);\n    }\n    this.constructor.lastError = { offset: this._offset, expected: this._expected };\n    throw new SyntaxError(formatError(this._input, this._failure, this._expected));\n  };\n\n  Object.assign(Parser.prototype, Grammar);\n\n\n  function parse(input, options) {\n    options = options || {};\n    var parser = new Parser(input, options.actions, options.types);\n    return parser.parse();\n  }\n\n  function formatError(input, offset, expected) {\n    var lines = input.split(/\\n/g),\n        lineNo = 0,\n        position = 0;\n\n    while (position <= offset) {\n      position += lines[lineNo].length + 1;\n      lineNo += 1;\n    }\n\n    var line = lines[lineNo - 1],\n        message = 'Line ' + lineNo + ': expected one of:\\n\\n';\n\n    for (var i = 0; i < expected.length; i++) {\n      message += '    - ' + expected[i][1] + ' from ' + expected[i][0] + '\\n';\n    }\n    var number = lineNo.toString();\n    while (number.length < 6) number = ' ' + number;\n    message += '\\n' + number + ' | ' + line + '\\n';\n\n    position -= line.length + 10;\n\n    while (position < offset) {\n      message += ' ';\n      position += 1;\n    }\n    return message + '^';\n  }\n\n  function inherit(subclass, parent) {\n    function chain () {};\n    chain.prototype = parent.prototype;\n    subclass.prototype = new chain();\n    subclass.prototype.constructor = subclass;\n  }\n\n\n  var exported = { Grammar: Grammar, Parser: Parser, parse: parse };\n\n  if (true) {\n    Object.assign(exports, exported);\n  } else { var ns; }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///498\n")},43:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"CanvasPainter\": () => (/* reexport */ CanvasPainter),\n  \"CodeMirrorHelper\": () => (/* reexport */ CodeMirrorHelper),\n  \"Control\": () => (/* reexport */ Control),\n  \"EditorBoard\": () => (/* reexport */ EditorBoard),\n  \"GameBoard\": () => (/* reexport */ GameBoard),\n  \"GameResult\": () => (/* reexport */ GameResult),\n  \"PalettePainter\": () => (/* reexport */ PalettePainter),\n  \"ProgramListDropDownHandler\": () => (/* reexport */ ProgramListDropDownHandler),\n  \"Storage\": () => (/* reexport */ Storage),\n  \"parse\": () => (/* reexport */ parse)\n});\n\n;// CONCATENATED MODULE: ./src/util/grid-coordinates.js\nclass GridCoordinatesTranslator {\r\n  constructor(width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.maxIndex = (width * height) - 1;\r\n  }\r\n\r\n  getSlotIndexFor(x, y) {\r\n    if (x > this.width - 1 || y > this.height - 1) {\r\n      throw new Error(`Coordinates out of bound: ${x},${y}`);\r\n    }\r\n    return x + y * this.width;\r\n  }\r\n\r\n  getCoordinatesFor(index) {\r\n    if (index > this.maxIndex) {\r\n      throw new Error(`Index out of bound: ${index}`);\r\n    }\r\n    return {\r\n      x: index % this.width,\r\n      y: Math.floor(index / this.width)\r\n    }\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/game/animation.js\nclass AnimationService {\r\n  constructor(animations, eventBus) {\r\n    this.animations = {};\r\n    for (const location in animations) {\r\n      if (Object.hasOwnProperty.call(animations, location)) {\r\n        this.animations[location] = AnimationService.createAnimationFromSettings(animations[location], eventBus);\r\n      }\r\n    }\r\n  }\r\n\r\n  getSprite(x, y, timestamp) {\r\n    return this.getAnimationAt(x, y)?.getSprite(timestamp);\r\n  }\r\n\r\n  getAnimationAt(x, y) {\r\n    const location = `${x},${y}`;\r\n    if (Object.hasOwnProperty.call(this.animations, location)) {\r\n      return this.animations[location];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  trigger(x, y) {\r\n    const animation = this.getAnimationAt(x, y);\r\n    if ((animation !== undefined) && (animation instanceof TwoWaysAnimation)) {\r\n      animation.launch();\r\n    }\r\n  }\r\n\r\n  static createAnimationFromSettings(animation, eventBus) {\r\n    switch(animation.type) {\r\n      case 'loop': return new LoopAnimation(animation.settings, eventBus);\r\n      case 'two-ways': return new TwoWaysAnimation(animation.settings, eventBus);\r\n    }\r\n  }\r\n}\r\n\r\nclass LoopAnimation {\r\n  constructor(settings, eventBus) {\r\n    this.settings = settings;\r\n    this.loopLimit = settings.sprites.length * settings.period;\r\n  }\r\n\r\n  getSprite(timestamp) {\r\n    this.advanceTime(timestamp);\r\n    return this.settings.sprites[this.getIndexForCurrentTimestamp()];\r\n  }\r\n\r\n  advanceTime(timestamp) {\r\n    this.currentTimestamp = timestamp;\r\n  }\r\n\r\n  getIndexForCurrentTimestamp() {\r\n    return Math.floor(this.currentTimestamp / this.settings.period) % this.settings.sprites.length;\r\n  }\r\n}\r\n\r\nclass TwoWaysAnimation {\r\n  constructor(settings, eventBus) {\r\n    this.baseAnimation = new LoopAnimation(settings);\r\n    this.alternateTimestamp = 0;\r\n    this.animationRunning = false;\r\n    this.animationForward = true;\r\n    if (settings.subscribe !== undefined) {\r\n      eventBus.subscribe(settings.subscribe, () => this.launch());\r\n    }\r\n  }\r\n\r\n  launch() {\r\n    this.animationRunning = true;\r\n  }\r\n\r\n  getSprite(timestamp) {\r\n    this.advanceTime(timestamp);\r\n    return this.baseAnimation.getSprite(this.alternateTimestamp);\r\n  }\r\n\r\n  getDelta(timestamp) {\r\n    if (this.previousTimestamp === undefined) {\r\n      this.previousTimestamp = timestamp;\r\n      return 0;\r\n    }\r\n    const delta = timestamp - this.previousTimestamp;\r\n    this.previousTimestamp = timestamp;\r\n    return delta;\r\n  }\r\n\r\n  advanceTime(timestamp) {\r\n    if (this.animationRunning) {\r\n      if (this.animationForward) {\r\n        this.alternateTimestamp += this.getDelta(timestamp);\r\n      } else {\r\n        this.alternateTimestamp -= this.getDelta(timestamp);\r\n      }\r\n      if (this.alternateTimestamp < 0) {\r\n        this.alternateTimestamp = 0;\r\n        this.animationRunning = false;\r\n        this.animationForward = true;\r\n        this.previousTimestamp = undefined;\r\n      } else if (this.alternateTimestamp >= this.baseAnimation.loopLimit) {\r\n        this.alternateTimestamp = this.baseAnimation.loopLimit -1;\r\n        this.animationRunning = false;\r\n        this.animationForward = false;\r\n        this.previousTimestamp = undefined;\r\n      }\r\n    }\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/game/event.js\nclass Event {\r\n  static GameReset = new Event('game-reset');\r\n  static GameStarted = new Event('game-started');\r\n  static GameFinished = new Event('game-finished');\r\n  static PlayerMoved = new Event('player-moved');\r\n  static PlayerDied = new Event('player-died');\r\n  static PlayerWon = new Event('player-won');\r\n  static PlayerShot = new Event('player-shot');\r\n  static InterpreterStep = new Event('interpreter-step');\r\n  static Score = new Event('game-score');\r\n\r\n  constructor(channelName) {\r\n    this.channelName = channelName;\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/game/board.js\n\r\n\r\n\r\n\r\n// Enums\r\nclass LogicBlock {\r\n  static Wall = new LogicBlock(\"█\");\r\n  static Exit = new LogicBlock(\"░\");\r\n  static Space = new LogicBlock(\" \");\r\n  static Zombie = new LogicBlock(\"👾\");\r\n  static Sphinx = new LogicBlock(\"💀\");\r\n  static Null = new LogicBlock(\"X\");\r\n\r\n  constructor(symbol) {\r\n    this.symbol = symbol;\r\n  }\r\n}\r\n\r\nclass CardinalDirection {\r\n  static North = new CardinalDirection(\r\n    \"▲\", \r\n    position => ({x: position.x, y: position.y - 1}),\r\n    position => ({x: position.x, y: position.y + 1})\r\n  );\r\n  static East = new CardinalDirection(\r\n    \"▶\", \r\n    position => ({x: position.x + 1, y: position.y}),\r\n    position => ({x: position.x - 1, y: position.y})\r\n  );\r\n  static South = new CardinalDirection(\r\n    \"▼\", \r\n    position => ({x: position.x, y: position.y + 1}),\r\n    position => ({x: position.x, y: position.y - 1})\r\n  );\r\n  static West = new CardinalDirection(\r\n    \"◀\", \r\n    position => ({x: position.x - 1, y: position.y}),\r\n    position => ({x: position.x + 1, y: position.y})\r\n  );\r\n\r\n  constructor(symbol, advancePosition, retreatPosition) {\r\n    this.symbol = symbol;\r\n    this.advancePosition = advancePosition;\r\n    this.retreatPosition = retreatPosition;\r\n  }\r\n\r\n  advance(position) {\r\n    return this.advancePosition(position);\r\n  }\r\n\r\n  retreat(position) {\r\n    return this.retreatPosition(position);\r\n  }\r\n\r\n  static order = [this.North, this.East, this.South, this.West];\r\n  static toTheRight(direction) {\r\n    const index = this.order.indexOf(direction) + 1;\r\n    return this.order[index % 4];\r\n  }\r\n\r\n  static toTheLeft(direction) {\r\n    const index = this.order.indexOf(direction) - 1;\r\n    return this.order[((index > -1) ? index : 3)];\r\n  }\r\n\r\n  static backwards(direction) {\r\n    const index = this.order.indexOf(direction) + 2;\r\n    return this.order[index % 4];\r\n  }\r\n}\r\n\r\nclass MoveDirection {\r\n  static Forth = new MoveDirection((cardinalDirection, player) => cardinalDirection.advance(player));\r\n  static Back = new MoveDirection((cardinalDirection, player) => cardinalDirection.retreat(player));\r\n\r\n  constructor(apply) {\r\n    this.apply = apply;\r\n  }\r\n}\r\n\r\n// TODO: Maybe extract position class\r\nclass Movable {\r\n  constructor(x, y, direction) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.direction = direction;\r\n    this.crashed = false;\r\n  }\r\n  \r\n  isAt(x, y) {\r\n    return this.x == x && this.y == y;\r\n  }\r\n\r\n  move(moveDirection) {\r\n    const newPosition = moveDirection.apply(this.direction, this);\r\n    this.x = newPosition.x;\r\n    this.y = newPosition.y;\r\n  }\r\n\r\n  wouldMove(moveDirection) {\r\n    return moveDirection.apply(this.direction, this);\r\n  }\r\n\r\n  wouldMoveTo(moveDirection, x, y) {\r\n    const newPosition = this.wouldMove(moveDirection);\r\n    return newPosition.x === x && newPosition.y === y;\r\n  }\r\n\r\n  rotateLeft() {\r\n    this.direction = CardinalDirection.toTheLeft(this.direction);\r\n  }\r\n  rotateRight() {\r\n    this.direction = CardinalDirection.toTheRight(this.direction);\r\n  }\r\n  rotateBack() {\r\n    this.direction = CardinalDirection.backwards(this.direction);\r\n  }\r\n  \r\n  crash() {\r\n    this.crashed = true;\r\n  }\r\n}\r\n\r\nclass Zombie extends Movable {\r\n  constructor(x, y, direction) {\r\n    super(x, y, direction);\r\n    this.sprite = null;\r\n    this.dead = null;\r\n  }\r\n\r\n  setupSprites(theme) {\r\n    this.sprite = theme.sprite['zombie'];\r\n    this.dead = theme.sprite['deadZombie'];\r\n  }\r\n\r\n  getSprite() {\r\n    return (this.crashed) ? this.dead : this.sprite;\r\n  }\r\n}\r\n\r\nclass Player extends Movable {\r\n  constructor(x, y, direction) {\r\n    super(x, y, direction);\r\n    this.done = false;\r\n  }\r\n\r\n  setupSprites(theme) {\r\n    CardinalDirection.North.sprite = theme.sprite['north'];\r\n    CardinalDirection.East.sprite = theme.sprite['east'];\r\n    CardinalDirection.South.sprite = theme.sprite['south'];\r\n    CardinalDirection.West.sprite = theme.sprite['west'];\r\n    CardinalDirection.North.arrowSprite = theme.sprite['nextNorth'];\r\n    CardinalDirection.East.arrowSprite = theme.sprite['nextEast'];\r\n    CardinalDirection.South.arrowSprite = theme.sprite['nextSouth'];\r\n    CardinalDirection.West.arrowSprite = theme.sprite['nextWest'];\r\n    this.deadSprite = theme.sprite['dead'];\r\n  }\r\n\r\n  subscribeToEvents(eventBus) {\r\n    eventBus.subscribe(Event.PlayerDied.channelName, () => this.crash());\r\n    eventBus.subscribe(Event.PlayerWon.channelName, () => this.finish());\r\n  }\r\n\r\n  getSprite() {\r\n    if (this.crashed) {\r\n      return this.deadSprite;\r\n    } else if (this.done) {\r\n      return null;\r\n    } else {\r\n      return this.direction.sprite;\r\n    }\r\n  }\r\n  \r\n  getNextMoveSprite() {\r\n    if (this.crashed || this.done) {\r\n      return null;\r\n    }\r\n    return this.direction.arrowSprite;\r\n  }\r\n\r\n  getShootTarget() {\r\n    return this.direction.advance(this);\r\n  }\r\n\r\n  finish() {\r\n    this.done = true;\r\n  }\r\n\r\n  getLeftPosition() {\r\n    const leftDirection = CardinalDirection.toTheLeft(this.direction);\r\n    return MoveDirection.Forth.apply(leftDirection, this);\r\n  }\r\n  getRightPosition() {\r\n    const rightDirection = CardinalDirection.toTheRight(this.direction);\r\n    return MoveDirection.Forth.apply(rightDirection, this);\r\n  }\r\n}\r\n\r\nclass Board {\r\n  constructor(eventBus) {\r\n    this.eventBus = eventBus;\r\n  }\r\n\r\n  loadScene(scene) {\r\n    this.scene = scene;\r\n    this.gridCoordinatesTranslator = new GridCoordinatesTranslator(this.scene.width, this.scene.height);\r\n    this.animationService = new AnimationService(this.scene.theme.animations, this.eventBus);\r\n  }\r\n\r\n  getSprite(x, y, timestamp) {\r\n    const animationSprite = this.animationService.getSprite(x, y, timestamp);\r\n    if (animationSprite !== undefined) {\r\n      return animationSprite;\r\n    } else {\r\n      // Invert axis to match canvas to JSON matrix\r\n      return this.scene.map[y][x];\r\n    }\r\n  }\r\n\r\n  getLogicLabelForSprite(sprite) {\r\n    return this.scene.logic[sprite];\r\n  }\r\n\r\n  getLogic(x, y) {\r\n    const text = this.getLogicLabelForSprite(this.getSprite(x, y));\r\n    if (text === undefined) {\r\n      return LogicBlock.Wall;\r\n    }\r\n    return LogicBlock[text];\r\n  }\r\n\r\n  getSlotIndexFor(x, y) {\r\n    return this.gridCoordinatesTranslator.getSlotIndexFor(x, y);\r\n  }\r\n\r\n  getCoordinatesFor(index) {\r\n    return this.gridCoordinatesTranslator.getCoordinatesFor(index);\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/sound.js\nconst soundBaseUrl = '/sidila/snd/';\r\n\r\nclass Sound {\r\n  constructor(file) {\r\n    this.sound = document.createElement(\"audio\");\r\n    this.sound.src = `${soundBaseUrl}/${file}`;\r\n  }\r\n\r\n  play() {\r\n    this.sound.play();\r\n  }\r\n  pause() {\r\n    this.sound.pause();\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/scene.js\nclass SceneService {\r\n  constructor() {\r\n    this.scenes = [\r\n      __webpack_require__(37),\r\n      __webpack_require__(679),\r\n      __webpack_require__(715),\r\n      __webpack_require__(387),\r\n      __webpack_require__(862)\r\n    ]\r\n  }\r\n\r\n  get(index) {\r\n    return this.scenes[index];\r\n  }\r\n\r\n  getSceneCount() {\r\n    return this.scenes.length;\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/game/game-board.js\n\r\n\r\n\r\n\r\n\r\nclass GameResult {\r\n  static NotFinished = new GameResult();\r\n  static Won = new GameResult();\r\n  static Died = new GameResult();\r\n}\r\n\r\nclass GameBoard extends Board {\r\n  constructor(eventBus) {\r\n    super(eventBus);\r\n    this.sceneService = new SceneService();\r\n    this.soundOn = true;\r\n    this.soundMap = {\r\n      step: new Sound('step.ogg'),\r\n      bang: new Sound('bang.ogg'),\r\n      win: new Sound('win.ogg'),\r\n      gameOver: new Sound('gameover.ogg')\r\n    };\r\n    this.subscribeToEvents();\r\n    this.reset(0);\r\n  }\r\n\r\n  // TODO: Let other classes subscribe events to simplify GameBoard \r\n  subscribeToEvents() {\r\n    this.eventBus.subscribe(Event.PlayerMoved.channelName, () => this.playSound(this.soundMap.step));\r\n    this.eventBus.subscribe(Event.PlayerShot.channelName, () => this.playSound(this.soundMap.bang));\r\n    this.eventBus.subscribe(Event.PlayerDied.channelName, () => this.playSound(this.soundMap.gameOver));\r\n    this.eventBus.subscribe(Event.PlayerWon.channelName, (coordinates) => {\r\n      this.animationService.trigger(coordinates.x, coordinates.y);\r\n      this.playSound(this.soundMap.win);\r\n    });\r\n  }\r\n\r\n  reset(sceneIndex) {\r\n    const scene = this.sceneService.get(sceneIndex);\r\n    this.loadScene(scene);\r\n    this.player = new Player(\r\n      this.scene.player.x,\r\n      this.scene.player.y,\r\n      CardinalDirection[this.scene.player.direction]\r\n    );\r\n    this.player.subscribeToEvents(this.eventBus);\r\n    this.zombie = new Zombie(\r\n      this.scene.zombie.x,\r\n      this.scene.zombie.y,\r\n      CardinalDirection.North\r\n    );\r\n    this.player.setupSprites(this.scene.theme);\r\n    this.zombie.setupSprites(this.scene.theme);\r\n    this.gameResult = GameResult.NotFinished;\r\n    this.moves = 0;\r\n    this.shots = 0;\r\n    this.publishNoDataEvent(Event.GameReset);\r\n  }\r\n\r\n  getSceneCount() {\r\n    return this.sceneService.getSceneCount();\r\n  }\r\n\r\n  canMoveInto(x, y) {\r\n    const logic = this.getLogic(x, y);\r\n    return logic === LogicBlock.Space || logic === LogicBlock.Exit;\r\n  }\r\n\r\n  isCrashed() {\r\n    return this.player.crashed;\r\n  }\r\n\r\n  isDone() {\r\n    return this.player.done;\r\n  }\r\n\r\n  start() {\r\n    this.publishNoDataEvent(Event.GameStarted);\r\n  }\r\n\r\n  movePlayer(moveDirection) {\r\n    this.publishPlayerMoved(moveDirection);\r\n    const newPosition = this.player.wouldMove(moveDirection);\r\n    if (this.canMoveInto(newPosition.x, newPosition.y)) {\r\n      this.player.move(moveDirection);\r\n      if (this.getLogicAround(this.player.x, this.player.y).includes(LogicBlock.Sphinx)) {\r\n        this.killPlayer();\r\n      }\r\n      const playerLogic = this.getLogic(this.player.x, this.player.y);\r\n      if (playerLogic === LogicBlock.Exit) {\r\n        this.exitPlayer();\r\n      }\r\n    } else {\r\n      this.killPlayer();\r\n    }\r\n    this.moves++;\r\n    if (this.player.crashed || this.player.done) {\r\n      this.publishGameFinished();\r\n    }\r\n  }\r\n  rotatePlayerLeft() {\r\n    this.player.rotateLeft();\r\n  }\r\n  rotatePlayerRight() {\r\n    this.player.rotateRight();\r\n  }\r\n  rotatePlayerBack() {\r\n    this.player.rotateBack();\r\n  }\r\n  playerShoot() {\r\n    this.publishNoDataEvent(Event.PlayerShot);\r\n    const shootAt = this.player.getShootTarget();\r\n    if (this.getLogic(shootAt.x, shootAt.y) === LogicBlock.Zombie) {\r\n      this.zombie.crash();\r\n    }\r\n    this.shots++;\r\n  }\r\n  killPlayer() {\r\n    this.publishPlayerDied();\r\n    this.gameResult = GameResult.Died;\r\n  }\r\n  exitPlayer() {\r\n    this.publishPlayerWon({ x: this.player.x, y: this.player.y });\r\n    this.gameResult = GameResult.Won;\r\n  }\r\n\r\n  getLogic(x, y) {\r\n    if (x < 0 || y < 0 || x > this.scene.width - 1 || y > this.scene.height - 1) {\r\n      return LogicBlock.Null;\r\n    }\r\n    if (this.zombie?.isAt(x, y) && this.zombie?.crashed !== true) {\r\n      return LogicBlock.Zombie;\r\n    }\r\n    return super.getLogic(x, y);\r\n  }\r\n  getLogicAround(x, y) {\r\n    return [\r\n      this.getLogic(x, y-1),\r\n      this.getLogic(x, y+1),\r\n      this.getLogic(x-1, y),\r\n      this.getLogic(x+1, y),\r\n    ];\r\n  }\r\n  getLogicInFrontOfPlayer() {\r\n    const inFrontPosition = this.player.wouldMove(MoveDirection.Forth);\r\n    return this.getLogic(inFrontPosition.x, inFrontPosition.y);\r\n  }\r\n  getLogicToTheLeftOfPlayer() {\r\n    const atTheLeftPosition = this.player.getLeftPosition();\r\n    return this.getLogic(atTheLeftPosition.x, atTheLeftPosition.y);\r\n  }\r\n  getLogicToTheRightOfPlayer() {\r\n    const atTheRightPosition = this.player.getRightPosition();\r\n    return this.getLogic(atTheRightPosition.x, atTheRightPosition.y);\r\n  }\r\n\r\n  getOverlaySprite(x, y, timestamp) {\r\n    if (this.player.isAt(x, y)) {\r\n      return this.player.getSprite();\r\n    }\r\n    if (this.zombie?.isAt(x, y)) {\r\n      return this.zombie.getSprite();\r\n    }\r\n    if (this.player.wouldMoveTo(MoveDirection.Forth, x, y)) {\r\n      return this.player.getNextMoveSprite();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  setSound(on) {\r\n    this.soundOn = on;\r\n  }\r\n\r\n  playSound(fx) {\r\n    if (this.soundOn) {\r\n      fx.play();\r\n    }\r\n  }\r\n\r\n  publishPlayerMoved(moveDirection) {\r\n    this.eventBus.publish(Event.PlayerMoved.channelName, moveDirection);\r\n  }\r\n  publishPlayerDied() {\r\n    this.eventBus.publish(Event.PlayerDied.channelName, null);\r\n  }\r\n  publishPlayerWon(coordinates) {\r\n    this.eventBus.publish(Event.PlayerWon.channelName, coordinates);\r\n  }\r\n  publishGameFinished() {\r\n    this.eventBus.publish(Event.GameFinished.channelName, this.gameResult);\r\n  }\r\n  \r\n  publishNoDataEvent(event) {\r\n    this.eventBus.publish(event.channelName, null);\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/util/event-bus.js\nclass EventBus {\r\n  constructor() {\r\n    this.subscribers = {};\r\n  }\r\n\r\n  subscribe(channel, subscriber) {\r\n    if (!Object.hasOwnProperty.call(this.subscribers, channel)) {\r\n      this.subscribers[channel] = [];\r\n    }\r\n    this.subscribers[channel].push(subscriber);\r\n  }\r\n\r\n  unsubscribe(channel, subscriber) {\r\n    if (Object.hasOwnProperty.call(this.subscribers, channel)) {\r\n      this.subscribers[channel].splice(this.subscribers[channel].indexOf(subscriber), 1);\r\n    }\r\n  }\r\n\r\n  publish(channel, event) {\r\n    if (Object.hasOwnProperty.call(this.subscribers, channel)) {\r\n      this.subscribers[channel].forEach(subscriber => {\r\n        subscriber(event);\r\n      });\r\n    }\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/game/editor-board.js\n\r\n\r\n\r\nconst MAX_UNDO_ITEMS = 100;\r\n\r\nclass EditorBoard extends Board {\r\n  constructor() {\r\n    super(new EventBus());\r\n    this.undo = [];\r\n  }\r\n\r\n  load(source) {\r\n    const scene = JSON.parse(source);\r\n    this.loadScene(scene);\r\n  }\r\n\r\n  save() {\r\n    return JSON.stringify(this.scene, null, 2);\r\n  }\r\n\r\n  setSlot(index, sprite) {\r\n    const coordinates = this.getCoordinatesFor(index);\r\n    if (this.scene.map[coordinates.y][coordinates.x] != sprite) {\r\n      const oldSprite = this.scene.map[coordinates.y][coordinates.x];\r\n      this.addUndo(() => this.scene.map[coordinates.y][coordinates.x] = oldSprite);\r\n      this.scene.map[coordinates.y][coordinates.x] = sprite;\r\n    }\r\n  }\r\n\r\n  addUndo(undoAction) {\r\n    this.undo.push(undoAction);\r\n    if (this.undo.length > MAX_UNDO_ITEMS) {\r\n      this.undo.pop();\r\n    }\r\n  }\r\n\r\n  undoLastAction() {\r\n    const undoAction = this.undo.pop();\r\n    if (undoAction !== undefined) {\r\n      undoAction();\r\n    }\r\n  }\r\n\r\n  getOverlaySprite(x, y) {\r\n    return null;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/drawing.js\n\r\n\r\nconst imageBaseUrl = '/sidila/img/';\r\n\r\nclass GridPainter {\r\n  constructor(canvas, width, height, slotWidth, slotHeight, hoverColor) {\r\n    this.canvas = canvas;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.slotWidth = slotWidth;\r\n    this.slotHeight = slotHeight;\r\n    this.slotsInX = Math.floor(this.width / this.slotWidth);\r\n    this.slotsInY = Math.floor(this.height / this.slotHeight);\r\n    this.hoverColor = hoverColor;\r\n    this.scaleX = canvas.clientWidth / this.width;\r\n    this.scaleY = canvas.clientHeight / this.height;\r\n  }\r\n\r\n  getContext2D() {\r\n    return this.canvas.getContext('2d');\r\n  }\r\n\r\n  mouseOver(x, y) {\r\n    this.hover = this.getSlotIndexForDiscrete(\r\n      Math.floor(x / this.scaleX / this.slotWidth),\r\n      Math.floor(y / this.scaleY / this.slotHeight)\r\n    );\r\n    return this.hover;\r\n  }\r\n  getSlotIndexForDiscrete(x, y) {\r\n    return x + y * this.slotsInX;\r\n  }\r\n\r\n  getCanvasCoordinatesForSlot(index) {\r\n    const coordinates = this.getCoordinatesForSlot(index);\r\n    return {\r\n      x: coordinates.x * this.slotWidth,\r\n      y: coordinates.y * this.slotHeight\r\n    };\r\n  }\r\n  getCoordinatesForSlot(index) {\r\n    return {\r\n      x: (index % this.slotsInX),\r\n      y: Math.floor(index / this.slotsInX)\r\n    };\r\n  }\r\n\r\n  drawGridSlot(context, origin, color) {\r\n    context.strokeStyle = color;\r\n    context.strokeRect(origin.x + .5, origin.y + .5, this.slotWidth - 1, this.slotHeight - 1);\r\n  }\r\n\r\n  paintHover(context) {\r\n    if (this.hover !== undefined) {\r\n      const origin = this.getCanvasCoordinatesForSlot(this.hover);\r\n      this.drawGridSlot(context, origin, this.hoverColor);\r\n    }\r\n  }\r\n}\r\n\r\nclass CanvasPainter extends GridPainter {\r\n  constructor(canvas, board, eventBus) {\r\n    super(\r\n      canvas, \r\n      board.scene.width * board.scene.theme.spriteWidth,\r\n      board.scene.height * board.scene.theme.spriteHeight,\r\n      board.scene.theme.spriteWidth, \r\n      board.scene.theme.spriteHeight,\r\n      'red'\r\n    );\r\n    this.board = board;\r\n    this.eventBus = eventBus;\r\n    this.sceneUpdated();\r\n    if (this.eventBus !== undefined) {\r\n      this.subscribeToEvents();\r\n    }\r\n  }\r\n\r\n  subscribeToEvents() {\r\n    this.eventBus.subscribe(Event.GameReset.channelName, () => this.sceneUpdated());\r\n  }\r\n\r\n  sceneUpdated() {\r\n    this.sprites = new Image();\r\n    this.sprites.src = `${imageBaseUrl}${this.board.scene.theme.image}`;\r\n  }\r\n\r\n  paint(timestamp) {\r\n    const context = this.getContext2D();\r\n    context.fillStyle = this.board.scene.theme.background;\r\n    context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    for(let y=0; y < this.slotsInY; y++) {\r\n      for(let x=0; x < this.slotsInX; x++) {\r\n        const spriteNumber = this.board.getSprite(x, y, timestamp);\r\n        this.drawSprite(context, spriteNumber, x, y);\r\n        const overlaySpriteNumber = this.board.getOverlaySprite(x, y, timestamp);\r\n        if (overlaySpriteNumber != null) {\r\n          this.drawSprite(context, overlaySpriteNumber, x, y);\r\n        }\r\n      }\r\n    }\r\n    this.paintHover(context);\r\n  }\r\n\r\n  drawSprite(context, spriteNumber, x, y) {\r\n    const sourceX = this.getSourceX(spriteNumber);\r\n    const sourceY = this.getSourceY(spriteNumber);\r\n    context.drawImage(\r\n      this.sprites, \r\n      sourceX, \r\n      sourceY,\r\n      this.slotWidth,\r\n      this.slotHeight,\r\n      x * this.slotWidth,\r\n      y * this.slotHeight,\r\n      this.slotWidth,\r\n      this.slotHeight\r\n    );    \r\n  }\r\n\r\n  getSourceX(spriteNumber) {\r\n    return this.slotWidth * (spriteNumber % (this.sprites.width/this.slotWidth));\r\n  }\r\n\r\n  getSourceY(spriteNumber) {\r\n    return this.slotHeight * Math.floor(spriteNumber / (this.sprites.width/this.slotWidth));\r\n  }\r\n}\r\n\r\nclass PalettePainter extends GridPainter {\r\n  constructor(canvas, scene) {\r\n    super(\r\n      canvas, \r\n      scene.theme.imageWidth,\r\n      scene.theme.imageHeight,\r\n      scene.theme.spriteWidth, \r\n      scene.theme.spriteHeight,\r\n      'red'\r\n    );\r\n    this.scene = scene;\r\n    this.sprites = new Image();\r\n    this.sprites.src = `${imageBaseUrl}${scene.theme.image}`;\r\n    this.selected = 0;\r\n  }\r\n\r\n  paint() {\r\n    const context = this.getContext2D();\r\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    context.drawImage(this.sprites, 0, 0);\r\n    if (this.selected !== undefined) {\r\n      const origin = this.getCanvasCoordinatesForSlot(this.selected);\r\n      this.drawGridSlot(context, origin, 'white');\r\n    }\r\n    this.paintHover(context);\r\n  }\r\n\r\n  selectSlot(index) {\r\n    this.selected = index;\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/util/storage.js\nconst STORAGE_PROGRAM_PREFIX = 'sidila-program-';\r\nconst PROGRAM_NAME_REGEX = /\\w{2,20}/g;\r\n\r\nclass Storage {\r\n\r\n  static requireValidProgramName(name) {\r\n    if (!name.match(PROGRAM_NAME_REGEX)) {\r\n      throw new Error('Nombre de programa inválido');\r\n    }\r\n  }\r\n\r\n  listSavedPrograms() {\r\n    const list = [];\r\n    for (let i=0, len=localStorage.length; i < len; ++i) {\r\n      if (localStorage.key(i).startsWith(STORAGE_PROGRAM_PREFIX)) {\r\n        list.push(Storage.getFilenameFromKey(localStorage.key(i)));\r\n      }\r\n    }\r\n    return list;\r\n  }\r\n  loadProgram(name) {\r\n    Storage.requireValidProgramName(name);\r\n    const key = Storage.getKeyFromFilename(name);\r\n    if (key != undefined && key != '') {\r\n      return localStorage.getItem(key);\r\n    }\r\n  }\r\n  saveProgram(name, program, overwrite) {\r\n    Storage.requireValidProgramName(name);\r\n    const key = Storage.getKeyFromFilename(name);\r\n    if (localStorage.getItem(key) !== null && !overwrite.checked) {\r\n      throw new Error('Ya existe un programa con ese nombre');\r\n    }\r\n    localStorage.setItem(key, program);\r\n  }\r\n  deleteProgram(name) {\r\n    Storage.requireValidProgramName(name);\r\n    const key = Storage.getKeyFromFilename(name);\r\n    localStorage.removeItem(key);\r\n  }\r\n\r\n  static getKeyFromFilename(filename) {\r\n    return STORAGE_PROGRAM_PREFIX + filename;\r\n  }\r\n\r\n  static getFilenameFromKey(key) {\r\n    return key.substring(STORAGE_PROGRAM_PREFIX.length, key.length);\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/game/score.js\nclass Score {\r\n  constructor() {\r\n    this.base = 200000; // 200k\r\n  }\r\n\r\n  getScore(lines, board) {\r\n    if (board.isCrashed()) {\r\n      return 0;\r\n    }\r\n    const zombieKilled = board.zombie.crashed;\r\n    const linesFactor = (zombieKilled) ? 0.96 : 1;\r\n    const moves = board.moves;\r\n    const movesFactor = (zombieKilled) ? 0.91 : 1;\r\n    const shots = board.shots;\r\n    const shotsFactor = (zombieKilled) ? 0.73 : 1;\r\n    return Math.ceil(\r\n      this.base \r\n      - (lines * 3002 * linesFactor) \r\n      - (moves * 996 * movesFactor)\r\n      - (shots * 603 * shotsFactor)\r\n    );\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/instructions/instruction.js\n\r\n\r\nclass Instruction {\r\n  constructor(start, end) {\r\n    this.location = { start, end };\r\n  }\r\n}\r\n\r\nclass Action extends Instruction {\r\n  constructor(start, end) {\r\n    super(start, end);\r\n  }\r\n}\r\n\r\nclass Move extends Action {\r\n  constructor(start, end) {\r\n    super(start, end);\r\n  }\r\n\r\n  execute(board) {\r\n    board.movePlayer(MoveDirection.Forth);\r\n  }\r\n}\r\n\r\nclass Back extends Action {\r\n  constructor(start, end) {\r\n    super(start, end);\r\n  }\r\n\r\n  execute(board) {\r\n    board.movePlayer(MoveDirection.Back);\r\n  }\r\n}\r\n\r\nclass Shoot extends Action {\r\n  constructor(start, end) {\r\n    super(start, end);\r\n  }\r\n\r\n  execute(board) {\r\n    board.playerShoot();\r\n  }\r\n}\r\n\r\nclass TurnDirection {\r\n  static Left = new TurnDirection((board) => board.rotatePlayerLeft());\r\n  static Right = new TurnDirection((board) => board.rotatePlayerRight());\r\n  static Back = new TurnDirection((board) => board.rotatePlayerBack());\r\n\r\n  constructor(action) {\r\n    this.action = action;\r\n  }\r\n}\r\n\r\nclass Turn extends Action {\r\n  constructor(start, end, direction) {\r\n    super(start, end);\r\n    switch (direction) {\r\n      case 'la derecha': \r\n        this.direction = TurnDirection.Right;\r\n        break;\r\n      case 'la izquierda':\r\n        this.direction = TurnDirection.Left;\r\n        break;\r\n      case 'atras':\r\n        this.direction = TurnDirection.Back;\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid direction: '${direction}'`);\r\n    }\r\n  }\r\n\r\n  execute(board) {\r\n    this.direction.action(board);\r\n  }\r\n}\r\n\r\nclass Branch extends Instruction {\r\n  constructor(start, end, condition, body, elseBody) {\r\n    super(start, end);\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.elseBody = elseBody;\r\n  }\r\n\r\n  evaluate(board) {\r\n    return this.condition.evaluate(board);\r\n  }\r\n}\r\n\r\nclass Loop extends Instruction {\r\n  constructor(start, end, condition, body) {\r\n    super(start, end);\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  evaluate(board) {\r\n    return this.condition.evaluate(board);\r\n  }\r\n}\r\n\r\nclass LookAheadCondition extends Instruction {\r\n  constructor(start, end, not, spriteLabel, lookUpDirection) {\r\n    super(start, end);\r\n    this.not = not === 'no';\r\n    if (spriteLabel === 'pared') {\r\n      this.condition = (sprite) => sprite === LogicBlock.Wall;\r\n    } else if (spriteLabel === 'zombie') {\r\n      this.condition = (sprite) => sprite === LogicBlock.Zombie;\r\n    } else if (spriteLabel === 'espacio') {\r\n      this.condition = (sprite) => sprite === LogicBlock.Space;\r\n    } else if (spriteLabel === 'salida') {\r\n      this.condition = (sprite) => sprite === LogicBlock.Exit;\r\n    } else {\r\n      this.condition = (sprite) => sprite !== LogicBlock.Space;\r\n    }\r\n    if (lookUpDirection == 'adelante') {\r\n      this.lookUpDirection = (board) => board.getLogicInFrontOfPlayer();\r\n    } else if (lookUpDirection == 'a la izquierda') {\r\n      this.lookUpDirection = (board) => board.getLogicToTheLeftOfPlayer();\r\n    } else {\r\n      this.lookUpDirection = (board) => board.getLogicToTheRightOfPlayer();\r\n    }\r\n  }\r\n\r\n  evaluate(board) {\r\n    const evaluation = this.condition(this.lookUpDirection(board));\r\n    return (this.not) ? !evaluation : evaluation;\r\n  }\r\n}\r\n\r\nclass InGameCondition extends Instruction {\r\n  constructor(start, end, not) {\r\n    super(start, end);\r\n    this.not = not === 'no';\r\n  }\r\n\r\n  evaluate(board) {\r\n    const evaluation = board.isDone();\r\n    return (this.not) ? !evaluation : evaluation;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/instructions/interpreter.js\n\r\n\r\n\r\nclass StepInterpreter {\r\n  constructor(board, tree, eventBus) {\r\n    this.eventBus = eventBus;\r\n    this.board = board;\r\n    this.tree = tree;\r\n    this.stack = [];\r\n    this.stackBody(this.tree.elements);\r\n    this.gameTicks = 0;\r\n    this.finished = false;\r\n  }\r\n\r\n  stackBody(nodes) {\r\n    for(let i=nodes.length - 1; i >= 0; i--) {\r\n      this.stackNode(nodes[i]);\r\n    }\r\n  }\r\n  stackNode(node) {\r\n    this.stack.push(node);\r\n  }\r\n\r\n  tick() {\r\n    this.gameTicks++;\r\n    const node = this.stack.pop();\r\n    if (node !== undefined) {\r\n      this.visitNode(node);\r\n    }\r\n    this.finished = this.stack.length === 0;\r\n  }\r\n\r\n  isFinished() {\r\n    return this.finished;\r\n  }\r\n\r\n  visitNode(node) {\r\n    const instruction = node.elements[0];\r\n    this.publishStep(instruction);\r\n    if (instruction instanceof Action) {\r\n      instruction.execute(this.board);\r\n    } else if (instruction instanceof Branch) {\r\n      if (instruction.evaluate(this.board)) {\r\n        this.stackBody(instruction.body);\r\n      } else if (instruction.elseBody !== undefined) {\r\n        this.stackBody(instruction.elseBody);\r\n      }\r\n    } else if (instruction instanceof Loop) {\r\n      if (instruction.evaluate(this.board)) {\r\n        this.stackNode(node);\r\n        this.stackBody(instruction.body);\r\n      }\r\n    }\r\n  }\r\n\r\n  createStepEvent(node) {\r\n    return {\r\n      location: node.location,\r\n      gameTicks: this.gameTicks\r\n    };\r\n  }\r\n\r\n  publishStep(instruction) {\r\n    const event = this.createStepEvent(instruction);\r\n    this.eventBus.publish(Event.InterpreterStep.channelName, event);\r\n  }\r\n\r\n  subscribeToStep(subscriber) {\r\n    this.eventBus.subscribe(Event.InterpreterStep.channelName, subscriber);\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/game/control.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Control {\r\n  constructor(codeMirror, canvas) {\r\n    this.codeMirror = codeMirror;\r\n    this.eventBus = new EventBus();\r\n    this.board = new GameBoard(this.eventBus);\r\n    this.canvasPainter = new CanvasPainter(canvas, this.board, this.eventBus);\r\n    this.score = new Score();\r\n    this.running = false;\r\n    this.subscribeToEvents();\r\n  }\r\n\r\n  subscribeToEvents() {\r\n    this.eventBus.subscribe(Event.GameFinished.channelName, () => this.running = false);\r\n    this.codeMirror.on('changes', () => this.publishScore());\r\n  }\r\n\r\n  run(tree) {\r\n    this.interpreter = new StepInterpreter(this.board, tree, this.eventBus);\r\n    this.board.start();\r\n    this.running = true;\r\n  }\r\n\r\n  isRunning() {\r\n    return this.running;\r\n  }\r\n\r\n  tick() {\r\n    this.interpreter.tick();\r\n    if (this.interpreter.isFinished()) {\r\n      this.running = false;\r\n    }\r\n    this.publishScore();\r\n  }\r\n\r\n  paint(timestamp) {\r\n    this.canvasPainter.paint(timestamp);\r\n  }\r\n\r\n  publishScore() {\r\n    const lines = this.codeMirror.lineCount();\r\n    const score = this.score.getScore(lines, this.board);\r\n    this.eventBus.publish(Event.Score.channelName, score);\r\n  }\r\n\r\n  reset(sceneIndex) {\r\n    this.board.reset(sceneIndex);\r\n    this.running = false;\r\n  }\r\n\r\n  subscribeToStep(subscriber) {\r\n    this.eventBus.subscribe(Event.InterpreterStep.channelName, subscriber);\r\n  }\r\n  subscribeToScore(subscriber) {\r\n    this.eventBus.subscribe(Event.Score.channelName, subscriber);\r\n  }\r\n  subscribeToGameFinished(subscriber) {\r\n    this.eventBus.subscribe(Event.GameFinished.channelName, subscriber);\r\n  }\r\n\r\n  setSound(on) {\r\n    this.board.setSound(on);\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/grammar/sidila.js\n\r\n\r\nconst maps = __webpack_require__(498);\r\n\r\nclass Actions {\r\n  makeMove(input, start, end, elements) {\r\n    return new Move(start, end);\r\n  }\r\n  makeBack(input, start, end, elements) {\r\n    return new Back(start, end);\r\n  }\r\n  makeShoot(input, start, end, elements) {\r\n    return new Shoot(start, end);\r\n  }\r\n  makeTurn(input, start, end, elements) {\r\n    return new Turn(start, end, elements[1].text);\r\n  }\r\n  makeBranch(input, start, end, elements) {\r\n    const condition = elements[1];\r\n    const body = elements[2].elements;\r\n    const elseBody = elements[3].elements[1]?.elements;\r\n    return new Branch(start, end, condition, body, elseBody);\r\n  }\r\n  makeLoop(input, start, end, elements) {\r\n    const condition = elements[1];\r\n    const body = elements[2].elements;\r\n    return new Loop(start, end, condition, body);\r\n  }\r\n  makeLookAheadCondition(input, start, end, elements) {\r\n    const not = elements[0].text;\r\n    const spriteLabel = elements[2].text;\r\n    const lookUpDirection = elements[3].text\r\n    return new LookAheadCondition(start, end, not, spriteLabel, lookUpDirection);\r\n  }\r\n  makeInGameCondition(input, start, end, elements) {\r\n    return new InGameCondition(start, end, elements[0].text);\r\n  }\r\n}\r\n\r\nfunction parse(code) {\r\n  return maps.parse(code, { actions: new Actions() })\r\n}\n;// CONCATENATED MODULE: ./src/ux/program-list.js\nclass ProgramListDropDownHandler {\r\n  constructor(storage, selectWidget) {\r\n    this.storage = storage;\r\n    this.selectWidget = selectWidget;\r\n  }\r\n\r\n  loadFiles() {\r\n    this.emptySelectWidget();\r\n    this.storage.listSavedPrograms().forEach(item => {\r\n      const option = document.createElement(\"option\");\r\n      option.text = item;\r\n      option.value = item;\r\n      this.selectWidget.add(option);\r\n    });\r\n  }\r\n\r\n  emptySelectWidget() {\r\n    const placeholder = [].filter.call(this.selectWidget.options, option => option.value === \"\")[0];\r\n    while(this.selectWidget.length > 0) {\r\n      this.selectWidget.remove(this.selectWidget.length - 1);\r\n    }\r\n    this.selectWidget.add(placeholder);\r\n  }\r\n\r\n  getSelectedProgram() {\r\n    const name = this.selectWidget.options[this.selectWidget.selectedIndex].value;\r\n    return this.storage.loadProgram(name);\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/ux/code-mirror-helper.js\nclass CodeMirrorHelper {\r\n  constructor(codeMirror, debugClassName, errorClassName) {\r\n    this.codeMirror = codeMirror;\r\n    this.debugClassName = debugClassName;\r\n    this.errorClassName = errorClassName;\r\n  }\r\n\r\n  highlight(location) {\r\n    const start = this.codeMirror.posFromIndex(location.start);\r\n    const end = this.codeMirror.posFromIndex(location.end);\r\n    this.clearHighlight();\r\n    this.lastHighlightMarker = this.codeMirror.markText(start, end, { className: this.debugClassName});\r\n    this.codeMirror.scrollIntoView(start);\r\n  }\r\n\r\n  clearHighlight() {\r\n    if (this.lastHighlightMarker != undefined) {\r\n      this.lastHighlightMarker.clear();\r\n    }\r\n  }\r\n\r\n  markError(error) {\r\n    const lineString = error.match(/^Line ([0-9]+)/)[1];\r\n    const shiftString = error.match(/([ ]+)\\^$/)[1];\r\n    const line = parseInt(lineString) - 1;\r\n    const shift = shiftString.length - 9;\r\n    const start = { line: line, ch: shift };\r\n    const end = { line: line, ch: shift + 1 };\r\n    this.lastErrorMarker = this.codeMirror.markText(start, end, { className: this.errorClassName});\r\n    this.codeMirror.scrollIntoView(start);\r\n  }\r\n\r\n  clearError() {\r\n    if (this.lastErrorMarker != undefined) {\r\n      this.lastErrorMarker.clear();\r\n    }\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/app.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43\n")},862:g=>{"use strict";g.exports=JSON.parse('{"width":16,"height":16,"player":{"x":1,"y":1,"direction":"South"},"zombie":{"x":8,"y":1},"theme":{"image":"nes_tileset_cemetery.png","imageWidth":384,"imageHeight":128,"spriteWidth":16,"spriteHeight":16,"background":"#077704","sprite":{"north":186,"east":185,"south":184,"west":187,"dead":100,"nextNorth":0,"nextEast":0,"nextSouth":0,"nextWest":0,"zombie":164,"deadZombie":165},"animations":{}},"logic":{"0":"Exit","1":"Space","5":"Space","13":"Space","29":"Space","32":"Space","33":"Space","34":"Space","61":"Space","63":"Space","64":"Space","96":"Sphinx","99":"Sphinx","122":"Space","123":"Space","124":"Space","125":"Space","129":"Space","151":"Space","170":"Space","176":"Space","177":"Space"},"space":1,"map":[[25,26,27,27,27,27,27,27,27,27,27,27,27,27,27,28],[52,1,1,1,1,1,1,1,1,1,1,1,1,1,151,24],[52,1,1,1,1,1,1,89,1,1,1,1,151,151,1,24],[52,1,151,151,1,124,101,113,102,103,100,124,124,1,1,24],[52,1,1,1,125,126,144,144,144,144,144,144,145,177,1,24],[36,11,11,1,125,42,43,43,43,174,174,174,45,177,1,24],[36,37,37,1,1,64,64,64,34,14,174,128,129,1,1,24],[62,63,63,1,1,1,1,151,170,14,174,128,177,151,151,24],[52,1,1,1,1,49,51,1,170,14,174,128,177,151,70,24],[52,30,31,1,1,73,75,1,86,171,174,175,177,151,71,111],[52,53,54,1,1,122,122,170,126,106,106,175,177,151,151,111],[52,122,122,1,1,51,1,170,42,106,106,175,177,1,1,24],[52,1,1,1,49,78,1,1,34,42,44,45,177,1,1,24],[52,1,96,1,73,98,102,103,101,64,64,64,1,1,151,24],[52,1,99,1,122,122,122,122,122,1,1,1,1,1,1,24],[148,149,149,149,140,140,140,149,149,149,138,150,0,168,149,141]]}')},37:g=>{"use strict";g.exports=JSON.parse('{"width":16,"height":16,"player":{"x":12,"y":2,"direction":"South"},"zombie":{"x":6,"y":7},"theme":{"image":"dungeon.png","imageWidth":384,"imageHeight":160,"spriteWidth":16,"spriteHeight":16,"background":"#91b09a","sprite":{"north":189,"east":189,"south":189,"west":189,"dead":165,"nextNorth":212,"nextEast":213,"nextSouth":237,"nextWest":236,"zombie":188,"deadZombie":164},"animations":{"11,0":{"type":"two-ways","settings":{"sprites":[204,201,198,195,192],"period":75,"subscribe":"game-started"}},"11,1":{"type":"two-ways","settings":{"sprites":[228,225,222,219,216],"period":75,"subscribe":"game-started"}},"12,0":{"type":"two-ways","settings":{"sprites":[205,202,199,196,193],"period":75,"subscribe":"game-started"}},"12,1":{"type":"two-ways","settings":{"sprites":[229,226,223,220,217],"period":75,"subscribe":"game-started"}},"13,0":{"type":"two-ways","settings":{"sprites":[206,203,200,197,194],"period":75,"subscribe":"game-started"}},"13,1":{"type":"two-ways","settings":{"sprites":[230,227,224,221,218],"period":75,"subscribe":"game-started"}},"7,13":{"type":"loop","settings":{"sprites":[157,158],"period":300}},"13,12":{"type":"two-ways","settings":{"sprites":[175,174,173,172],"period":100}}}},"logic":{"54":"Space","172":"Exit","173":"Exit","174":"Exit","175":"Exit","190":"Sphinx"},"space":54,"map":[[5,6,6,6,6,104,6,6,6,6,6,204,205,206,6,7],[29,30,30,147,30,128,30,30,168,30,30,228,229,230,30,31],[53,184,186,54,54,54,54,54,54,54,54,54,54,54,54,55],[102,54,54,54,54,54,54,54,209,210,54,54,54,54,54,75],[76,54,182,54,54,54,54,54,233,234,54,54,54,54,54,99],[100,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[102,54,54,54,54,54,54,54,54,54,8,78,78,127,78,4],[53,54,54,54,54,54,54,54,54,182,99,25,25,25,25,25],[76,54,54,54,54,54,54,54,182,182,55,25,25,25,25,25],[100,54,54,54,54,190,54,54,54,54,56,6,6,6,6,7],[53,54,54,54,54,54,54,54,54,54,80,171,30,175,30,31],[53,54,54,54,54,54,54,158,54,54,54,54,54,54,54,55],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[77,78,78,78,127,78,78,78,78,78,127,78,78,78,78,79]]}')},679:g=>{"use strict";g.exports=JSON.parse('{"width":16,"height":16,"player":{"x":7,"y":2,"direction":"South"},"zombie":{"x":9,"y":9},"theme":{"image":"dungeon.png","imageWidth":384,"imageHeight":160,"spriteWidth":16,"spriteHeight":16,"background":"#91b09a","sprite":{"north":189,"east":189,"south":189,"west":189,"dead":165,"nextNorth":212,"nextEast":213,"nextSouth":237,"nextWest":236,"zombie":188,"deadZombie":164},"animations":{"3,5":{"type":"loop","settings":{"sprites":[34,36,38,40,42],"period":120}},"4,5":{"type":"loop","settings":{"sprites":[35,37,39,41,43],"period":120}},"7,12":{"type":"two-ways","settings":{"sprites":[175,174,173,172],"period":100}}}},"logic":{"54":"Space","172":"Exit","173":"Exit","174":"Exit","175":"Exit","190":"Sphinx"},"space":54,"map":[[5,6,6,6,6,104,6,6,6,6,104,105,6,6,6,7],[29,30,30,30,30,128,30,148,30,30,128,129,30,30,30,31],[53,54,54,54,54,54,54,54,182,182,54,54,54,185,183,55],[102,54,54,54,54,54,54,54,182,54,54,54,54,54,186,75],[76,54,54,18,19,54,54,54,182,182,54,54,54,54,54,99],[100,54,54,34,35,54,54,54,182,54,54,54,54,54,54,55],[53,54,54,66,67,54,54,182,54,54,54,54,54,54,54,55],[53,54,54,54,54,54,54,54,54,54,207,208,54,54,54,55],[102,54,54,54,54,54,54,54,54,54,231,232,54,8,78,4],[53,54,54,54,8,78,78,127,9,54,54,54,54,32,25,25],[76,54,54,54,32,25,25,25,33,54,54,54,54,55,25,25],[100,54,54,54,56,6,6,6,57,54,54,54,54,56,6,7],[53,54,54,54,80,30,30,175,81,54,54,54,54,80,30,31],[53,54,54,54,190,54,54,54,54,54,54,54,54,54,186,55],[53,186,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[77,78,78,78,127,78,78,78,78,78,127,78,78,78,78,79]]}')},715:g=>{"use strict";g.exports=JSON.parse('{"width":16,"height":16,"player":{"x":13,"y":13,"direction":"West"},"zombie":{"x":3,"y":9},"theme":{"image":"dungeon.png","imageWidth":384,"imageHeight":160,"spriteWidth":16,"spriteHeight":16,"background":"#91b09a","sprite":{"north":189,"east":189,"south":189,"west":189,"dead":165,"nextNorth":212,"nextEast":213,"nextSouth":237,"nextWest":236,"zombie":188,"deadZombie":164},"animations":{"12,11":{"type":"two-ways","settings":{"sprites":[204,201,198,195,192],"period":75,"subscribe":"game-started"}},"12,12":{"type":"two-ways","settings":{"sprites":[228,225,222,219,216],"period":75,"subscribe":"game-started"}},"13,11":{"type":"two-ways","settings":{"sprites":[205,202,199,196,193],"period":75,"subscribe":"game-started"}},"13,12":{"type":"two-ways","settings":{"sprites":[229,226,223,220,217],"period":75,"subscribe":"game-started"}},"14,11":{"type":"two-ways","settings":{"sprites":[206,203,200,197,194],"period":75,"subscribe":"game-started"}},"14,12":{"type":"two-ways","settings":{"sprites":[230,227,224,221,218],"period":75,"subscribe":"game-started"}},"7,1":{"type":"two-ways","settings":{"sprites":[175,174,173,172],"period":100}}}},"logic":{"54":"Space","172":"Exit","173":"Exit","174":"Exit","175":"Exit","190":"Sphinx"},"space":54,"map":[[5,6,6,6,6,104,6,6,6,6,104,105,6,6,6,7],[29,30,30,30,30,128,30,175,30,30,128,129,30,30,30,31],[53,182,182,54,54,54,54,54,182,182,54,54,54,185,183,55],[102,54,54,54,54,54,54,54,54,54,54,54,54,54,186,75],[76,54,54,8,78,78,78,9,54,54,190,54,54,54,54,99],[100,54,54,32,25,25,25,33,54,54,54,54,54,54,54,55],[53,54,54,56,6,6,105,57,54,54,54,54,54,54,54,55],[53,54,54,80,30,30,129,81,54,54,54,54,54,54,54,55],[102,54,54,54,209,210,54,54,54,54,54,8,78,78,78,4],[53,54,54,54,233,234,54,54,54,54,54,32,25,25,25,25],[76,54,54,54,54,54,54,54,54,54,54,55,25,25,25,25],[100,54,54,54,54,54,54,54,54,54,54,56,192,193,194,7],[53,54,54,54,54,54,54,54,54,54,54,80,216,217,218,31],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[77,78,78,78,127,78,78,78,78,78,127,78,78,78,78,79]]}')},387:g=>{"use strict";g.exports=JSON.parse('{"width":16,"height":16,"player":{"x":14,"y":14,"direction":"West"},"zombie":{"x":1,"y":13},"theme":{"image":"dungeon.png","imageWidth":384,"imageHeight":160,"spriteWidth":16,"spriteHeight":16,"background":"#91b09a","sprite":{"north":189,"east":189,"south":189,"west":189,"dead":165,"nextNorth":212,"nextEast":213,"nextSouth":237,"nextWest":236,"zombie":188,"deadZombie":164},"animations":{"14,13":{"type":"two-ways","settings":{"sprites":[144,145,146,147,148],"period":75,"subscribe":"game-started"}},"7,1":{"type":"two-ways","settings":{"sprites":[175,174,173,172],"period":100}}}},"logic":{"54":"Space","172":"Exit","173":"Exit","174":"Exit","175":"Exit","190":"Sphinx"},"space":54,"map":[[5,6,6,6,6,104,6,6,6,6,104,105,6,6,6,7],[29,30,30,30,30,128,30,175,30,30,128,129,30,30,30,31],[53,182,182,54,54,54,54,54,54,190,54,54,54,54,54,55],[102,54,182,54,54,54,54,54,54,54,54,54,8,9,54,75],[76,54,54,8,78,78,78,9,54,54,54,54,32,33,54,99],[100,54,54,32,25,25,25,77,78,78,78,78,79,53,54,55],[77,9,54,56,6,6,105,7,25,25,5,6,6,57,54,55],[5,57,54,80,30,30,129,31,25,25,29,30,30,81,54,55],[29,81,54,54,209,210,54,55,5,6,57,54,54,54,54,55],[53,54,54,54,233,234,54,75,29,30,81,54,8,78,78,79],[76,54,8,78,78,9,54,99,53,54,54,54,32,25,25,25],[100,54,55,25,25,53,54,55,53,54,8,78,79,25,25,25],[53,54,56,6,6,57,54,56,57,54,56,6,6,6,6,7],[53,54,80,30,30,81,54,80,81,54,80,30,30,30,144,31],[53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55],[77,78,78,78,127,78,78,78,78,78,127,78,78,78,78,79]]}')}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var C=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g](C,C.exports,__webpack_require__),C.exports}__webpack_require__.d=(g,I)=>{for(var C in I)__webpack_require__.o(I,C)&&!__webpack_require__.o(g,C)&&Object.defineProperty(g,C,{enumerable:!0,get:I[C]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(43);sidila=__webpack_exports__})();